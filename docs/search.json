[{"path":"/articles/datavolley.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"datavolley","text":"","code":"install.packages(\"datavolley\", repos = c(\"https://openvolley.r-universe.dev\",                                          \"https://cloud.r-project.org\"))  ## or  ## install.packages(\"remotes\") ## if needed remotes::install_github(\"openvolley/datavolley\")"},{"path":"/articles/datavolley.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"datavolley","text":"Read one example data files bundled package: Note working files scouted VolleyMetrics, use conventions files differ standard DataVolley usage. option tell dv_read follow conventions: Number serves team: Distribution serve run lengths: court position associated action can recorded two ways. common zones (numbered 1-9). Heatmap attack rate court zone (attack made ):  prefer colourful court, check court_colour = \"indoor\" option. Note make two calls ggcourt example, one background_only = TRUE plot just court background colours, foreground_only = TRUE add grid lines labels. Making two calls allows us control layer order, court colours behind heatmap, grid lines top :  Heatmap attacks ended, using attacks Nova KBM Branik position 4:  can also use end subzone information, recorded. subzones divide zone four, get higher spatial resolution (subzone always scouted). plot , using subzones:  using arrows show starting ending zones attacks:  Another source position data court coordinates. included data files, generally must manually entered scout can time consuming process. purposes demonstration, generate fake coordinate data:  also use coordinates generate heatmap-style plot serve location:","code":"library(datavolley) x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE) summary(x) #> Match summary: #> Date: 2015-01-25 #> League: Finale mladinke #> Teams: Braslovče (JERONČIČ ZORAN/MIHALINEC DAMIJANA) #>        vs #>        Nova KBM Branik (HAFNER MATJAŽ) #> Result: 3-0 (25-16, 25-14, 25-22) #> Duration: 67 minutes x <- dv_read(\"/your/file.dvw\", skill_evaluation_decode = \"volleymetrics\") serve_idx <- find_serves(plays(x)) table(plays(x)$team[serve_idx]) #>  #>       Braslovče Nova KBM Branik  #>              74              54 serve_run_info <- find_runs(plays(x)[serve_idx, ]) table(unique(serve_run_info[, c(\"run_id\", \"run_length\")])$run_length) #>  #>  1  2  3  4  5  7  8  #> 34 16  7  4  1  1  1 library(ggplot2) library(dplyr) ## calculate attack frequency by zone, per team attack_rate <- plays(x) %>% dplyr::filter(skill == \"Attack\") %>%     group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%     mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup  ## add x, y coordinates associated with the zones attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = \"lower\"))  ## for team 2, these need to be on the top half of the diagram tm2i <- attack_rate$team == teams(x)[2] attack_rate[tm2i, c(\"x\", \"y\")] <- dv_flip_xy(attack_rate[tm2i, c(\"x\", \"y\")])  ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(x)) +     scale_fill_gradient2(name = \"Attack rate\") ggplot(attack_rate, aes(x, y, fill = rate)) +     ## plot just the background court colour     ggcourt(court_colour = \"indoor\", background_only = TRUE) +     ## add the heatmap     geom_tile() +     ## now add the grid lines and labels     ggcourt(labels = teams(x), court_colour = \"indoor\", foreground_only = TRUE) +     scale_fill_gradient2(name = \"Attack rate\") ## calculate attack frequency by zone, per team attack_rate <- plays(x) %>%      dplyr::filter(team == \"Nova KBM Branik\" & skill == \"Attack\" & start_zone == 4) %>%     group_by(end_zone) %>% dplyr::summarize(n_attacks = n()) %>%     mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup attack_rate <- cbind(attack_rate, dv_xy(attack_rate$end_zone, end = \"lower\")) ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(\"lower\", labels = NULL) +     scale_fill_gradient2(name = \"Rate: attack\\nend location\") #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_tile()`). attack_rate <- plays(x) %>%      dplyr::filter(team != \"Nova KBM Branik\" & skill == \"Attack\" & start_zone == 4 & !is.na(end_subzone)) %>%     group_by(end_zone, end_subzone) %>% dplyr::summarize(n_attacks = n()) %>%     mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup #> `summarise()` has grouped output by 'end_zone'. You can override using the #> `.groups` argument. attack_rate <- cbind(attack_rate, dv_xy(attack_rate$end_zone, end = \"lower\", subzones = attack_rate$end_subzone)) ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(\"lower\", labels = NULL) +     scale_fill_gradient2(name = \"Rate: attack\\nend location\") ## first tabulate attacks by starting and ending zone attack_rate <- plays(x) %>% dplyr::filter(team == teams(x)[1] & skill == \"Attack\") %>%   group_by(start_zone, end_zone) %>% tally() %>% ungroup  ## convert counts to rates attack_rate$rate <- attack_rate$n/sum(attack_rate$n)  ## discard zones with zero attacks or missing location information attack_rate <- attack_rate %>% dplyr::filter(rate>0 & !is.na(start_zone) & !is.na(end_zone))  ## add starting x, y coordinates attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = \"lower\", xynames = c(\"sx\", \"sy\")))  ## and ending x, y coordinates attack_rate <- cbind(attack_rate, dv_xy(attack_rate$end_zone, end = \"upper\", xynames = c(\"ex\", \"ey\")))  ## plot in reverse order so largest arrows are on the bottom attack_rate <- attack_rate %>% dplyr::arrange(desc(rate))  p <- ggplot(attack_rate, aes(x, y, col = rate)) + ggcourt(labels = c(teams(x)[1], \"\"), court_colour = \"indoor\") for (n in 1:nrow(attack_rate))     p <- p + geom_path(data = data.frame(x = c(attack_rate$sx[n], attack_rate$ex[n]),                                          y = c(attack_rate$sy[n], attack_rate$ey[n]),                                          rate = attack_rate$rate[n]),                        aes(size = rate), lineend = \"round\",                        arrow = arrow(length = unit(2, \"mm\"), type = \"closed\", angle = 20, ends = \"last\")) #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. p + scale_colour_gradient(name = \"Attack rate\") + guides(size = \"none\") ## take just the serves from the play-by-play data xserves <- subset(plays(x), skill == \"Serve\")  ## if the file had been scouted with coordinate included, we could plot them directly ## this file has no coordinates, so we'll fake some up for demo purposes coords <- dv_fake_coordinates(\"serve\", xserves$evaluation) xserves[, c(\"start_coordinate\", \"start_coordinate_x\", \"start_coordinate_y\",             \"end_coordinate\", \"end_coordinate_x\", \"end_coordinate_y\")] <- coords  ## now we can plot these xserves$evaluation[!xserves$evaluation %in% c(\"Ace\", \"Error\")] <- \"Other\"  ggplot(xserves, aes(start_coordinate_x, start_coordinate_y,        xend = end_coordinate_x, yend = end_coordinate_y, colour = evaluation)) +     geom_segment(arrow = arrow(length = unit(2, \"mm\"), type = \"closed\", angle = 20)) +     scale_colour_manual(values = c(Ace = \"limegreen\", Error = \"firebrick\", Other = \"dodgerblue\"),                         name = \"Evaluation\") +     ggcourt(labels = c(\"Serving team\", \"Receiving team\")) ggplot(xserves, aes(start_coordinate_x, start_coordinate_y)) +     stat_density_2d(geom = \"raster\", aes(fill = ..density..), contour = FALSE) +     scale_fill_distiller(palette = 1, direction = 1, name = \"Density\") +     ggcourt(\"lower\", labels = \"Serving team\")"},{"path":"/articles/datavolley.html","id":"analyzing-multiple-files-at-once","dir":"Articles","previous_headings":"Example","what":"Analyzing multiple files at once","title":"datavolley","text":"might want read multiple files analyze together. First find DataVolley files target directory: Read files loop, extract play--play component , join together: (Note, idiomatic R way use lapply instead loops: achieves thing. Use whichever prefer.) get dataset-wide statistics, example reception error rate team:","code":"d <- dir(\"c:/data\", pattern = \"dvw$\", full.names = TRUE) ## if your files are in nested directories, add 'recursive = TRUE' to the arguments lx <- list() ## read each file for (fi in seq_along(d)) lx[[fi]] <- dv_read(d[fi]) ## now extract the play-by-play component from each and bind them together px <- list() for (fi in seq_along(lx)) px[[fi]] <- plays(lx[[fi]]) px <- do.call(rbind, px) lx <- lapply(d, dv_read) px <- do.call(rbind, lapply(lx, plays)) library(dplyr) px %>% dplyr::filter(skill == \"Reception\") %>% group_by(team) %>%    dplyr::summarize(N_receptions = n(), error_rate = mean(evaluation == \"Error\", na.rm = TRUE)) #> # A tibble: 4 × 3 #>   team            N_receptions error_rate #>   <chr>                  <int>      <dbl> #> 1 ACH Volley                32     0.0312 #> 2 Braslovče                 44     0.227  #> 3 Maribor                   64     0.188  #> 4 Nova KBM Branik           66     0.121"},{"path":"/articles/datavolley.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"datavolley","text":"see unexpected behaviour, try dv_read(..., do_warn = TRUE, verbose = TRUE) obtain diagnostic information process reading parsing DataVolley file. Also check text encoding specified dv_read (specify one??)","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Raymond. Author, maintainer. Adrien Ickowicz. Author. Tyler Widdison. Author. David Awosoga. Contributor. Christophe Elek. Contributor. Kornel Kilinski. Contributor. openvolley.org. Originator.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Raymond B, Ickowicz , Widdison T (2024). datavolley: Reading Analyzing DataVolley Scout Files. R package version 1.8.4, https://github.com/openvolley/datavolley, https://datavolley.openvolley.org.","code":"@Manual{,   title = {datavolley: Reading and Analyzing DataVolley Scout Files},   author = {Ben Raymond and Adrien Ickowicz and Tyler Widdison},   year = {2024},   note = {R package version 1.8.4, https://github.com/openvolley/datavolley},   url = {https://datavolley.openvolley.org}, }"},{"path":"/index.html","id":"datavolley","dir":"","previous_headings":"","what":"Reading and Analyzing DataVolley Scout Files","title":"Reading and Analyzing DataVolley Scout Files","text":"R package reading volleyball scouting files DataVolley format (*.dvw), collected example commercial DataVolley, Click Scout, VolleyStation software. VolleyStation files *.vsm format also supported. See also: package vignette examples information code snippets volleyball analytics R datavolley openvolley packages DataVolley file validator suite analytical apps, built datavolley package. peranavolley package provides similar functionality reading files scouted AOC VBStats software.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reading and Analyzing DataVolley Scout Files","text":"","code":"install.packages(\"datavolley\", repos = c(\"https://openvolley.r-universe.dev\",                                          \"https://cloud.r-project.org\"))  ## or  ## install.packages(\"remotes\") ## if needed remotes::install_github(\"openvolley/datavolley\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Reading and Analyzing DataVolley Scout Files","text":"Read one example data files bundled package:","code":"library(datavolley) x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE) summary(x) #> Match summary: #> Date: 2015-01-25 #> League: Finale mladinke #> Teams: Braslovče (JERONČIČ ZORAN/MIHALINEC DAMIJANA) #>        vs #>        Nova KBM Branik (HAFNER MATJAŽ) #> Result: 3-0 (25-16, 25-14, 25-22) #> Duration: 67 minutes"},{"path":"/index.html","id":"troubleshooting","dir":"","previous_headings":"","what":"Troubleshooting","title":"Reading and Analyzing DataVolley Scout Files","text":"see unexpected behaviour, try dv_read(..., do_warn = TRUE, verbose = TRUE) obtain diagnostic information process reading parsing DataVolley file. player team names garbled (strange characters) check text encoding dv_read(..., verbose = TRUE) tells using - may need override correct one via encoding parameter.","code":""},{"path":"/reference/check_player_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for similar player names — check_player_names","title":"Check for similar player names — check_player_names","text":"Player names can sometimes spelled incorrectly, particularly character encoding issues. can particular problem combining data multiple files. function checks similar names might possibly multiple variants name.","code":""},{"path":"/reference/check_player_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for similar player names — check_player_names","text":"","code":"check_player_names(x, distance_threshold = 4)"},{"path":"/reference/check_player_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for similar player names — check_player_names","text":"x datavolley: datavolley object returned dv_read, list objects distance_threshold numeric: two names differ amount less threshold, returned possible matches","code":""},{"path":"/reference/check_player_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for similar player names — check_player_names","text":"data.frame","code":""},{"path":[]},{"path":"/reference/check_player_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for similar player names — check_player_names","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)   check_player_names(x) }"},{"path":"/reference/datavolley-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions in package datavolley. — datavolley-deprecated","title":"Deprecated functions in package datavolley. — datavolley-deprecated","text":"functions listed deprecated defunct   near future. possible, alternative functions similar   functionality also mentioned. Help pages deprecated functions   available help(\"-deprecated\").","code":""},{"path":"/reference/datavolley-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions in package datavolley. — datavolley-deprecated","text":"","code":"ggxy(zones, end = \"lower\", xynames = c(\"x\", \"y\"), as_for_serve = FALSE)"},{"path":"/reference/datavolley-deprecated.html","id":"ggxy","dir":"Reference","previous_headings":"","what":"ggxy","title":"Deprecated functions in package datavolley. — datavolley-deprecated","text":"ggxy, use dv_xy.","code":""},{"path":"/reference/datavolley.html","id":null,"dir":"Reference","previous_headings":"","what":"datavolley — datavolley","title":"datavolley — datavolley","text":"Provides basic functions parsing Datavolley scout files. Datavolley software package used scouting summarizing volleyball matches.","code":""},{"path":"/reference/datavolley.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"datavolley — datavolley","text":"example data files provided datavolley package came http://www.odbojka.si/.","code":""},{"path":[]},{"path":"/reference/datavolley.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"datavolley — datavolley","text":"Ben Raymond ben@untan.gl","code":""},{"path":"/reference/dv_action2text.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a short, human-readable text summary of one or more actions — dv_action2text","title":"Generate a short, human-readable text summary of one or more actions — dv_action2text","text":"Generate short, human-readable text summary one actions","code":""},{"path":"/reference/dv_action2text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a short, human-readable text summary of one or more actions — dv_action2text","text":"","code":"dv_action2text(x, verbosity = 1)"},{"path":"/reference/dv_action2text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a short, human-readable text summary of one or more actions — dv_action2text","text":"x data.frame tibble: one rows datavolleyplays object returned dv_read verbosity integer: 1 = least verbose, 2 = verbose. Currently ignored","code":""},{"path":"/reference/dv_action2text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a short, human-readable text summary of one or more actions — dv_action2text","text":"character vector","code":""},{"path":"/reference/dv_action2text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a short, human-readable text summary of one or more actions — dv_action2text","text":"","code":"x <- dv_read(dv_example_file()) dv_action2text(plays(x)[27:30, ]) #> [1] \"Float serve by ANJA HRIBERNIK 97 (Negative, opponent free attack)\" #> [2] \"Reception by KARMINA SUŠNIK (Perfect pass)\"                        #> [3] \"Set by KAJA KEGLEVIČ (Perfect)\"                                    #> [4] \"Head ball attack by ANITA SOBOČAN (X5 - Error)\""},{"path":"/reference/dv_attack_code2desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Nominal descriptions for standard attack codes — dv_attack_code2desc","title":"Nominal descriptions for standard attack codes — dv_attack_code2desc","text":"Nominal descriptions standard attack codes","code":""},{"path":"/reference/dv_attack_code2desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nominal descriptions for standard attack codes — dv_attack_code2desc","text":"","code":"dv_attack_code2desc(code)"},{"path":"/reference/dv_attack_code2desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nominal descriptions for standard attack codes — dv_attack_code2desc","text":"code character: vector attack codes (\"X5\", \"VP\", etc)","code":""},{"path":"/reference/dv_attack_code2desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nominal descriptions for standard attack codes — dv_attack_code2desc","text":"named character vector descriptions. Unrecognized attack codes NA description.","code":""},{"path":"/reference/dv_attack_code2desc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nominal descriptions for standard attack codes — dv_attack_code2desc","text":"","code":"dv_attack_code2desc(c(\"X5\", \"X7\", \"PP\", \"blah\")) #>             X5             X7             PP           blah  #>   \"Shoot in 4\" \"Quick - push\"   \"Setter tip\"             NA"},{"path":"/reference/dv_attack_code2loc.html","id":null,"dir":"Reference","previous_headings":"","what":"Nominal starting coordinate for standard attack codes — dv_attack_code2loc","title":"Nominal starting coordinate for standard attack codes — dv_attack_code2loc","text":"Nominal starting coordinate standard attack codes","code":""},{"path":"/reference/dv_attack_code2loc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nominal starting coordinate for standard attack codes — dv_attack_code2loc","text":"","code":"dv_attack_code2loc(code)"},{"path":"/reference/dv_attack_code2loc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nominal starting coordinate for standard attack codes — dv_attack_code2loc","text":"code character: vector attack codes (\"X5\", \"VP\", etc)","code":""},{"path":"/reference/dv_attack_code2loc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nominal starting coordinate for standard attack codes — dv_attack_code2loc","text":"vector numeric coordinates","code":""},{"path":"/reference/dv_attack_code2loc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nominal starting coordinate for standard attack codes — dv_attack_code2loc","text":"","code":"dv_attack_code2loc(code = c(\"X5\", \"X7\", \"PP\")) #>   X5   X7   PP  #> 4912 4932 4964"},{"path":"/reference/dv_attack_code2set_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Set type for standard attack codes — dv_attack_code2set_type","title":"Set type for standard attack codes — dv_attack_code2set_type","text":"Set type standard attack codes","code":""},{"path":"/reference/dv_attack_code2set_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set type for standard attack codes — dv_attack_code2set_type","text":"","code":"dv_attack_code2set_type(code)"},{"path":"/reference/dv_attack_code2set_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set type for standard attack codes — dv_attack_code2set_type","text":"code character: vector attack codes (\"X5\", \"VP\", etc)","code":""},{"path":"/reference/dv_attack_code2set_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set type for standard attack codes — dv_attack_code2set_type","text":"named vector sides (\"F\", \"B\", \"C\", \"P\", \"S\", \"-\")","code":""},{"path":"/reference/dv_attack_code2set_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set type for standard attack codes — dv_attack_code2set_type","text":"","code":"dv_attack_code2set_type(code = c(\"X5\", \"X7\", \"PP\")) #>  X5  X7  PP  #> \"F\" \"C\" \"S\""},{"path":"/reference/dv_attack_code2side.html","id":null,"dir":"Reference","previous_headings":"","what":"Attack side for standard attack codes — dv_attack_code2side","title":"Attack side for standard attack codes — dv_attack_code2side","text":"Attack side standard attack codes","code":""},{"path":"/reference/dv_attack_code2side.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attack side for standard attack codes — dv_attack_code2side","text":"","code":"dv_attack_code2side(code)"},{"path":"/reference/dv_attack_code2side.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attack side for standard attack codes — dv_attack_code2side","text":"code character: vector attack codes (\"X5\", \"VP\", etc)","code":""},{"path":"/reference/dv_attack_code2side.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attack side for standard attack codes — dv_attack_code2side","text":"named vector sides (\"L\", \"R\", \"C\")","code":""},{"path":"/reference/dv_attack_code2side.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attack side for standard attack codes — dv_attack_code2side","text":"","code":"dv_attack_code2side(code = c(\"X5\", \"X7\", \"PP\")) #>  X5  X7  PP  #> \"R\" \"R\" \"L\""},{"path":"/reference/dv_attack_code_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate attack type and starting zone into an attack code. — dv_attack_code_map","title":"Translate attack type and starting zone into an attack code. — dv_attack_code_map","text":"DataVolley files attack codes ready, (example, using Click&Scout), function take starting zone tempo attack map attack code.","code":""},{"path":"/reference/dv_attack_code_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate attack type and starting zone into an attack code. — dv_attack_code_map","text":"","code":"dv_attack_code_map(type, start_zone)"},{"path":"/reference/dv_attack_code_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate attack type and starting zone into an attack code. — dv_attack_code_map","text":"type character: vector attack tempos (\"H\", \"T\", \"Q\", etc). type vector length 1 expanded length start_zone vector, needed start_zone integer: vector start zones","code":""},{"path":"/reference/dv_attack_code_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate attack type and starting zone into an attack code. — dv_attack_code_map","text":"vector attack codes, set_types, etc.","code":""},{"path":"/reference/dv_attack_code_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate attack type and starting zone into an attack code. — dv_attack_code_map","text":"","code":"dv_attack_code_map(type = c(\"H\", \"Q\", \"T\"), start_zone = c(\"8\", \"3\", \"4\")) #> [1] \"VP\" \"X1\" \"X5\""},{"path":"/reference/dv_attack_phase.html","id":null,"dir":"Reference","previous_headings":"","what":"Attack phase — dv_attack_phase","title":"Attack phase — dv_attack_phase","text":"Attack phase defined DataVolley: either \"Reception\", \"Transition sideout\" \"Transition breakpoint\", assigned attack actions.","code":""},{"path":"/reference/dv_attack_phase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attack phase — dv_attack_phase","text":"","code":"dv_attack_phase(x)"},{"path":"/reference/dv_attack_phase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attack phase — dv_attack_phase","text":"x datavolleyplays: plays component datavolley object returned [dv_read()]","code":""},{"path":"/reference/dv_attack_phase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attack phase — dv_attack_phase","text":"Character vector","code":""},{"path":"/reference/dv_cone2xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Attack cones to x, y coordinates — dv_cone2xy","title":"Attack cones to x, y coordinates — dv_cone2xy","text":"Attack cones x, y coordinates","code":""},{"path":"/reference/dv_cone2xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attack cones to x, y coordinates — dv_cone2xy","text":"","code":"dv_cone2xy(   start_zones,   end_cones,   end = \"upper\",   xynames = c(\"ex\", \"ey\"),   as = \"points\",   force_center_zone = FALSE )"},{"path":"/reference/dv_cone2xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attack cones to x, y coordinates — dv_cone2xy","text":"start_zones integer: starting zone attack end_cones integer: cone attack end string: use \"lower\" \"upper\" part figure xynames character: names use x y columns returned data.frame string: either \"points\" \"polygons\" (see Value, ) force_center_zone logical: vector indicating attacks treated center zone attacks regardless start_zone value (e.g. setter). FALSE, start_zone value used. provided single scalar value, applied attacks","code":""},{"path":"/reference/dv_cone2xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attack cones to x, y coordinates — dv_cone2xy","text":"tibble (data.frame) columns \"x\" \"y\" (names specified xynames). \"polygons\", columns lists, polygon four x- y-coordinates","code":""},{"path":[]},{"path":"/reference/dv_cone2xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attack cones to x, y coordinates — dv_cone2xy","text":"","code":"if (FALSE) { ## attacks from left side (zone 4) to cones 1-7  ## plot as line segments cxy <- dv_cone2xy(4, 1:7) ## add starting coordinate for zone 4 cxy <- cbind(dv_xy(4), cxy) ggplot(cxy, aes(x, y, xend=ex, yend=ey)) + geom_segment() + ggcourt()  ## plot as polygons cxy <- dv_cone2xy(4, 1:7, as = \"polygons\")  ## this returns coordinates as list columns, unpack these to use with ggplot ##  also add an identifier for each polygon cxy <- data.frame(x = unlist(cxy$ex), y = unlist(cxy$ey),                   id = unlist(lapply(1:nrow(cxy), rep, 4))) ggplot(cxy, aes(x, y, group = id, fill = as.factor(id))) + geom_polygon() +    ggcourt() }"},{"path":"/reference/dv_cone_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"The polygon coordinates for attack cones — dv_cone_polygons","title":"The polygon coordinates for attack cones — dv_cone_polygons","text":"polygon coordinates attack cones","code":""},{"path":"/reference/dv_cone_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The polygon coordinates for attack cones — dv_cone_polygons","text":"","code":"dv_cone_polygons(zone, end = \"upper\", extended = FALSE)"},{"path":"/reference/dv_cone_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The polygon coordinates for attack cones — dv_cone_polygons","text":"zone string: one \"L\", \"R\", \"M\" end string: use \"lower\" \"upper\" part figure extended logical: FALSE, polygons cover actual court area; TRUE, extended cover court periphery well","code":""},{"path":"/reference/dv_cone_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The polygon coordinates for attack cones — dv_cone_polygons","text":"data.frame columns cone_number, x, y","code":""},{"path":"/reference/dv_cone_polygons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The polygon coordinates for attack cones — dv_cone_polygons","text":"","code":"if (FALSE) {  library(ggplot2)  cxy <- dv_cone_polygons(\"M\")  ggplot(cxy, aes(x, y, group = cone_number, fill = as.factor(cone_number))) +    geom_polygon() + ggcourt() }"},{"path":"/reference/dv_court.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a volleyball court diagram — dv_court","title":"Plot a volleyball court diagram — dv_court","text":"Volleyball court schematic suitable adding figure","code":""},{"path":"/reference/dv_court.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a volleyball court diagram — dv_court","text":"","code":"dv_court(   plot_package = \"base\",   court = \"full\",   show_zones = TRUE,   labels = c(\"Serving team\", \"Receiving team\"),   as_for_serve = FALSE,   show_zone_lines = TRUE,   show_minor_zones = FALSE,   grid_colour = \"black\",   zone_colour = \"grey70\",   minor_zone_colour = \"grey80\",   fixed_aspect_ratio = TRUE,   zone_font_size = 10,   ... )"},{"path":"/reference/dv_court.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a volleyball court diagram — dv_court","text":"plot_package string: either \"base\" \"ggplot2\". \"ggplot2\", ggcourt function used court string: \"full\" (show full court) \"lower\" \"upper\" (show lower upper half court) show_zones logical: add numbers indicating court zones (3m squares)? labels string: labels lower upper court halves (pass NULL labels) as_for_serve logical: TRUE show_zones TRUE, show zones serving. zones 1,5,6,7,9 meaningful case show_zone_lines logical: FALSE, just show 3m line. TRUE, also show 3m x 3m zones show_minor_zones logical: add lines subzones (1.5m squares)? grid_colour string: colour use court sidelines, 3m line, net zone_colour string: colour use zone lines labels minor_zone_colour string: colour use minor zone grid lines fixed_aspect_ratio logical: TRUE, coerce plotted court square (half-court plot) 2:1 rectangle (full court plot). Prior package version 0.5.3 TRUE default zone_font_size numeric: font size zone labels ... : additional parameters passed ggplot2::theme_classic(...)","code":""},{"path":"/reference/dv_court.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a volleyball court diagram — dv_court","text":"datavolley package uses following dimensions coordinates plotting: court shown sidelines oriented vertically net oriented horizontally intersection left-hand sideline bottom baseline (0.5, 0.5) intersection right-hand sideline top baseline (3.5, 6.5) net intersects sidelines (0.5, 3.5) (3.5, 3.5) zones 1-9 (defined DataVolley manual) lower half court located : (3, 1) (3, 3) (2, 3) (1, 3) (1, 1) (2, 1) (1, 2) (2, 2) (3, 2) zones 1-9 (defined DataVolley manual) upper half court located : (1, 6) (1, 4) (2, 4) (3, 4) (3, 6) (2, 6) (3, 5) (2, 5) (1, 5) get visual depiction , try:  ggplot() + ggcourt() + theme_bw()","code":""},{"path":[]},{"path":"/reference/dv_court.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a volleyball court diagram — dv_court","text":"","code":"if (FALSE) { x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE)  library(dplyr)  ## Example: attack frequency by zone, per team  attack_rate <- plays(x) %>% dplyr::filter(skill == \"Attack\") %>%   group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%   mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup  ## add columns \"x\" and \"y\" for the x,y coordinates associated with the zones attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = \"lower\"))  ## for team 2, these need to be on the top half of the diagram tm2 <- attack_rate$team == teams(x)[2] attack_rate[tm2, c(\"x\", \"y\")] <- dv_xy(attack_rate$start_zone, end = \"upper\")[tm2, ]  ## plot it dv_heatmap(attack_rate[, c(\"x\", \"y\", \"rate\")], legend_title = \"Attack rate\")  ## add the court diagram dv_court(labels = teams(x)) }"},{"path":"/reference/dv_create_meta_attacks.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a meta attack data.frame from the plays object if it is missing — dv_create_meta_attacks","title":"Create a meta attack data.frame from the plays object if it is missing — dv_create_meta_attacks","text":"DataVolley file meta attack dataframe (example, using Click&Scout), function create one information plays object.","code":""},{"path":"/reference/dv_create_meta_attacks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a meta attack data.frame from the plays object if it is missing — dv_create_meta_attacks","text":"","code":"dv_create_meta_attacks(plays)"},{"path":"/reference/dv_create_meta_attacks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a meta attack data.frame from the plays object if it is missing — dv_create_meta_attacks","text":"plays data.frame: plays component datavolley object, returned dv_read","code":""},{"path":"/reference/dv_create_meta_attacks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a meta attack data.frame from the plays object if it is missing — dv_create_meta_attacks","text":"data.frame attacks.","code":""},{"path":"/reference/dv_example_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Example DataVolley files provided as part of the datavolley package — dv_example_file","title":"Example DataVolley files provided as part of the datavolley package — dv_example_file","text":"Example DataVolley files provided part datavolley package","code":""},{"path":"/reference/dv_example_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example DataVolley files provided as part of the datavolley package — dv_example_file","text":"","code":"dv_example_file(choice = 1)"},{"path":"/reference/dv_example_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example DataVolley files provided as part of the datavolley package — dv_example_file","text":"choice numeric: data file return? 1 - January 2015 Slovenian junior women's final Braslovče Nova KBM Branik (obtained http://www.odbojka.si/ 2 - December 2012 men's Slovenian national championship semifinal ACH Volley Maribor (obtained http://www.odbojka.si/ 3 - Nicaragua vs Cuba women Pan American Cup, August 2022 (vsm format, courtesy Christophe Elek)","code":""},{"path":"/reference/dv_example_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example DataVolley files provided as part of the datavolley package — dv_example_file","text":"path file","code":""},{"path":[]},{"path":"/reference/dv_example_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example DataVolley files provided as part of the datavolley package — dv_example_file","text":"","code":"myfile <- dv_example_file() x <- dv_read(myfile, insert_technical_timeouts = FALSE) summary(x) #> Match summary: #> Date: 2015-01-25 #> League: Finale mladinke #> Teams: Braslovče (JERONČIČ ZORAN/MIHALINEC DAMIJANA) #>        vs #>        Nova KBM Branik (HAFNER MATJAŽ) #> Result: 3-0 (25-16, 25-14, 25-22) #> Duration: 67 minutes"},{"path":"/reference/dv_fake_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Fake coordinate data — dv_fake_coordinates","title":"Fake coordinate data — dv_fake_coordinates","text":"Generates fake coordinate data. DataVolley software capability accurately record court locations associated action. However, files contain information (can time consuming enter). function generates fake coordinate data can used demonstration purposes.","code":""},{"path":"/reference/dv_fake_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fake coordinate data — dv_fake_coordinates","text":"","code":"dv_fake_coordinates(skill, evaluation)"},{"path":"/reference/dv_fake_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fake coordinate data — dv_fake_coordinates","text":"skill string: skill type generate positions (\"serve\" implemented far) evaluation character: vector evaluations (returned evalution column datavolleyplays object)","code":""},{"path":"/reference/dv_fake_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fake coordinate data — dv_fake_coordinates","text":"data.frame coordinates columns \"start_coordinate\", \"start_coordinate_x\", \"start_coordinate_y\", \"end_coordinate\", \"end_coordinate_x\", \"end_coordinate_y\". returned data.frame many rows length evaluation vector","code":""},{"path":[]},{"path":"/reference/dv_fake_coordinates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fake coordinate data — dv_fake_coordinates","text":"","code":"if (FALSE) { library(ggplot2)  ## read example data file x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)  ## take just the serves from the play-by-play data xserves <- subset(plays(x), skill==\"Serve\")  ## if the file had been scouted with coordinate included, we could plot them directly ## this file has no coordinates, so we'll fake some up for demo purposes coords <- dv_fake_coordinates(\"serve\", xserves$evaluation) xserves[, c(\"start_coordinate\", \"start_coordinate_x\", \"start_coordinate_y\",             \"end_coordinate\", \"end_coordinate_x\", \"end_coordinate_y\")] <- coords  ## now we can plot these xserves$evaluation[!xserves$evaluation %in% c(\"Ace\", \"Error\")] <- \"Other\"  ggplot(xserves, aes(start_coordinate_x, start_coordinate_y,        xend=end_coordinate_x, yend=end_coordinate_y, colour=evaluation))+     geom_segment() + geom_point() +     scale_colour_manual(values=c(Ace=\"limegreen\", Error=\"firebrick\", Other=\"dodgerblue\")) +     ggcourt(labels=c(\"Serving team\", \"Receiving team\")) }"},{"path":"/reference/dv_find_to_flip_coordinates.html","id":null,"dir":"Reference","previous_headings":"","what":"Find coordinates that need flipping — dv_find_to_flip_coordinates","title":"Find coordinates that need flipping — dv_find_to_flip_coordinates","text":"orientation coordinates (e.g. serve going lower part court upper, vice-versa?) depends scout entered . function finds coordinates require flipping, attacks/serves/whatever can plotted orientation","code":""},{"path":"/reference/dv_find_to_flip_coordinates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find coordinates that need flipping — dv_find_to_flip_coordinates","text":"","code":"dv_find_to_flip_coordinates(x, target_start_end = \"lower\")"},{"path":"/reference/dv_find_to_flip_coordinates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find coordinates that need flipping — dv_find_to_flip_coordinates","text":"x datavolleyplays: plays component datavolley object returned dv_read target_start_end string: \"lower\" \"upper\"","code":""},{"path":"/reference/dv_find_to_flip_coordinates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find coordinates that need flipping — dv_find_to_flip_coordinates","text":"logical index length equal number rows x. TRUE indicates rows x need coordinates flipped","code":""},{"path":[]},{"path":"/reference/dv_flip_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Flip the x,y court coordinates — dv_flip_xy","title":"Flip the x,y court coordinates — dv_flip_xy","text":"convenience function transform coordinates top half court bottom, vice-verse.","code":""},{"path":"/reference/dv_flip_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flip the x,y court coordinates — dv_flip_xy","text":"","code":"dv_flip_xy(x, y)  dv_flip_x(x)  dv_flip_y(y)  dv_flip_index(index)"},{"path":"/reference/dv_flip_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flip the x,y court coordinates — dv_flip_xy","text":"x numeric: x-coordinate. dv_flip_xy can two-column matrix data.frame containing x y y numeric: y-coordinate index integer: grid index value","code":""},{"path":"/reference/dv_flip_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flip the x,y court coordinates — dv_flip_xy","text":"transformed coordinates grid index","code":""},{"path":[]},{"path":"/reference/dv_flip_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flip the x,y court coordinates — dv_flip_xy","text":"","code":"if (FALSE) {  x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE)  library(ggplot2)  library(dplyr)  ## attack rate by zone (both teams combined) attack_rate <- plays(x) %>% dplyr::filter(skill==\"Attack\") %>%    group_by(team, start_zone) %>% dplyr::summarize(n_attacks=n()) %>%    mutate(rate=n_attacks/sum(n_attacks)) %>% ungroup  ## add columns \"x\" and \"y\" for the x,y coordinates associated with the zones attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end=\"lower\"))  ## plot this ggplot(attack_rate, aes(x, y, fill=rate)) + geom_tile() + ggcourt(labels=teams(x)) +      scale_fill_gradient2(name=\"Attack rate\")  ## or, plot at the other end of the court attack_rate <- attack_rate %>% mutate(x=dv_flip_x(x), y=dv_flip_y(y))  ggplot(attack_rate, aes(x, y, fill=rate)) + geom_tile() + ggcourt(labels=teams(x)) +      scale_fill_gradient2(name=\"Attack rate\") }"},{"path":"/reference/dv_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a court heatmap, using base graphics — dv_heatmap","title":"Plot a court heatmap, using base graphics — dv_heatmap","text":"See link{ggcourt} ggplot2-based court diagram, can used plot heatmaps e.g. ggplot2::geom_tile.","code":""},{"path":"/reference/dv_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a court heatmap, using base graphics — dv_heatmap","text":"","code":"dv_heatmap(   x,   y,   z,   col,   zlim,   legend = TRUE,   legend_title = NULL,   legend_title_font = 1,   legend_title_cex = 0.7,   legend_cex = 0.7,   legend_pos = c(0.8, 0.85, 0.25, 0.75),   res,   add = FALSE )"},{"path":"/reference/dv_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a court heatmap, using base graphics — dv_heatmap","text":"x numeric, RasterLayer data.frame: x-coordinates data plot, RasterLayer layer data.frame containing data (x, y, z together) y numeric: y-coordinates data plot z numeric: values data plot col character: vector colours use zlim numeric: minimum maximum z values colors plotted, defaulting range finite values z legend logical: TRUE, plot legend legend_title string: title legend legend_title_font numeric: 1 = normal, 2 = bold, 3 = italic legend_title_cex numeric: size scaling legend title legend_cex numeric: size scaling legend text legend_pos numeric: position legend (xmin, xmax, ymin, ymax) - normalized units res numeric: size heatmap cells. parameter needed cases input data sparse, automatic algorithm work . Values given metres, res 3 showing zones, 1.5 showing subzones add logical: TRUE, add heatmap existing plot","code":""},{"path":"/reference/dv_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot a court heatmap, using base graphics — dv_heatmap","text":"Data can provided either separate x, y, z objects, single RasterLayer data.frame object. data.frame, first three columns used (assumed order x, y, z).","code":""},{"path":[]},{"path":"/reference/dv_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a court heatmap, using base graphics — dv_heatmap","text":"","code":"if (FALSE) { x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)  library(dplyr)  ## Example: attack frequency by zone, per team  attack_rate <- plays(x) %>% dplyr::filter(skill == \"Attack\") %>%   group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%   mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup  ## add columns \"x\" and \"y\" for the x,y coordinates associated with the zones attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = \"lower\"))  ## for team 2, these need to be on the top half of the diagram tm2 <- attack_rate$team == teams(x)[2] attack_rate[tm2, c(\"x\", \"y\")] <- dv_xy(attack_rate$start_zone, end=\"upper\")[tm2, ]  ## plot it dv_heatmap(attack_rate[, c(\"x\", \"y\", \"rate\")], legend_title = \"Attack rate\")  ## or, controlling the z-limits dv_heatmap(attack_rate[, c(\"x\", \"y\", \"rate\")], legend_title = \"Attack rate\", zlim = c(0, 1))  ## add the court diagram dv_court(labels = teams(x))  ## sometimes you may need more control over the plot layout ## set up a plot with 10% bottom/top margins and 20% left/right margins ## showing the lower half of the court only dv_plot_new(margins = c(0.05, 0.1, 0.05, 0.1), court = \"lower\") ## add the heatmap dv_heatmap(attack_rate[1:6, c(\"x\", \"y\", \"rate\")], add = TRUE) ## and the court diagram dv_court(court = \"lower\")  }"},{"path":"/reference/dv_index2xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid index to x,y coordinate and vice-versa — dv_index2xy","title":"Grid index to x,y coordinate and vice-versa — dv_index2xy","text":"DataVolley uses grid represent positions court (values columns \"start_coordinate\", \"mid_coordinate\", \"end_coordinate\" play--play data frame). functions convert grid index values x, y coordinates suitable plotting, vice-versa. description court dimensons coordinates see ggcourt.","code":""},{"path":"/reference/dv_index2xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid index to x,y coordinate and vice-versa — dv_index2xy","text":"","code":"dv_index2xy(index)  dv_xy2index(x, y)"},{"path":"/reference/dv_index2xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid index to x,y coordinate and vice-versa — dv_index2xy","text":"index integer: vector grid indices. missing, entire grid returned. row numbers match grid indices x numeric: x-coordinate. dv_index2xy can two-column matrix data.frame containing x y y numeric: y-coordinate","code":""},{"path":"/reference/dv_index2xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid index to x,y coordinate and vice-versa — dv_index2xy","text":"dv_index2xy, data.frame columns \"x\" \"y\"; dv_xy2index vector integer values","code":""},{"path":[]},{"path":"/reference/dv_index2xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid index to x,y coordinate and vice-versa — dv_index2xy","text":"","code":"## positions (zones) 1 and 3 are at x, y coordinates c(3, 1) and c(2, 3) respectively  ## their grid indices: dv_xy2index(c(3, 2), c(1, 3)) #> [1] 1677 4351"},{"path":"/reference/dv_int2rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert integer colour to RGB — dv_int2rgb","title":"Convert integer colour to RGB — dv_int2rgb","text":"DataVolley files use integer representation colours. functions convert hex colour strings used R.","code":""},{"path":"/reference/dv_int2rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert integer colour to RGB — dv_int2rgb","text":"","code":"dv_int2rgb(z)  dv_rgb2int(x)"},{"path":"/reference/dv_int2rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert integer colour to RGB — dv_int2rgb","text":"z integer: vector integers x integer: vector hex colour strings","code":""},{"path":"/reference/dv_int2rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert integer colour to RGB — dv_int2rgb","text":"Character vector hex RGB colour strings","code":""},{"path":"/reference/dv_int2rgb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert integer colour to RGB — dv_int2rgb","text":"","code":"dv_int2rgb(c(255, 16711680)) #> [1] \"#0000FF\" \"#FF0000\""},{"path":"/reference/dv_meta_video.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the video metadata in a datavolley object — dv_meta_video","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"Get set video metadata datavolley object","code":""},{"path":"/reference/dv_meta_video.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"","code":"dv_meta_video(x)  dv_meta_video(x) <- value"},{"path":"/reference/dv_meta_video.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"x datavolley: datavolley object returned [datavolley::dv_read()] value string data.frame: string containing path video file, data.frame columns \"camera\" \"file\"","code":""},{"path":"/reference/dv_meta_video.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"`dv_meta_video`, existing video metadata. `dv_meta_video<-`, video metadata value `x` changed","code":""},{"path":"/reference/dv_meta_video.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or set the video metadata in a datavolley object — dv_meta_video","text":"","code":"x <- dv_read(dv_example_file()) dv_meta_video(x) ## empty dataframe #> [1] camera file   #> <0 rows> (or 0-length row.names) dv_meta_video(x) <- \"/path/to/my/videofile\" dv_meta_video(x) #>   camera                  file #> 1      0 /path/to/my/videofile"},{"path":"/reference/dv_plot_new.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new plot page for base graphics plotting — dv_plot_new","title":"Create a new plot page for base graphics plotting — dv_plot_new","text":"plot set either full- half-court plot, depending inputs. extent can specified via court argument (values either \"full\", \"lower\", \"upper\"), via x y arguments. latter, provide either separate x y numeric vectors, single x RasterLayer object. extent specified methods, full-court plot assumed.","code":""},{"path":"/reference/dv_plot_new.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new plot page for base graphics plotting — dv_plot_new","text":"","code":"dv_plot_new(x, y, legend, court, margins, par_args, ...)"},{"path":"/reference/dv_plot_new.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new plot page for base graphics plotting — dv_plot_new","text":"x numeric RasterLayer: x-coordinates data plot, RasterLayer layer defining extent data y numeric: y-coordinates data plot. needed x RasterLayer object legend logical: TRUE, leave space legend court string: either \"full\", \"lower\", \"upper\" margins numeric: vector four values use margins (bottom, left, top, right). Values proportion plot size par_args list: parameters pass par ... : additional parameters passed plot.window","code":""},{"path":[]},{"path":"/reference/dv_plot_new.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new plot page for base graphics plotting — dv_plot_new","text":"","code":"dv_plot_new() ## show an attack from position 4 to position 6 from <- dv_xy(4, end = \"lower\") to <- dv_xy(6, end = \"upper\") lines(c(from[1], to[1]), c(from[2], to[2]), col = \"green\") ## add the court diagram dv_court(labels = c(\"Attacking team\", \"Defending team\"))"},{"path":"/reference/dv_point_phase.html","id":null,"dir":"Reference","previous_headings":"","what":"Point phase — dv_point_phase","title":"Point phase — dv_point_phase","text":"Point phase defined DataVolley: either \"Sideout\" \"Breakpoint\", assigned winning losing actions (including green codes). Note point phase inferred winning action (.e. point phase value winning losing action \"Sideout\" winning team receiving).","code":""},{"path":"/reference/dv_point_phase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Point phase — dv_point_phase","text":"","code":"dv_point_phase(x)"},{"path":"/reference/dv_point_phase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Point phase — dv_point_phase","text":"x datavolleyplays: plays component datavolley object returned [dv_read()]","code":""},{"path":"/reference/dv_point_phase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Point phase — dv_point_phase","text":"Character vector","code":""},{"path":"/reference/dv_read.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a datavolley file — dv_read","title":"Read a datavolley file — dv_read","text":"do_transliterate option may helpful trying work multiple files competition, since different text encodings may used different files. can lead e.g. multiple versions team name. Transliterating can help avoid , cost losing e.g. diacriticals. Transliteration applied converting specified text encoding UTF-8. Common encodings used DataVolley files include \"windows-1252\" (western Europe), \"windows-1250\" (central Europe), \"iso-8859-1\" (western Europe Americas), \"iso-8859-2\" (central/eastern Europe), \"iso-8859-13\" (Baltic languages)","code":""},{"path":"/reference/dv_read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a datavolley file — dv_read","text":"","code":"dv_read(   filename,   insert_technical_timeouts = TRUE,   do_warn = FALSE,   do_transliterate = FALSE,   encoding = \"guess\",   date_format = \"guess\",   extra_validation = 2,   validation_options = list(),   surname_case = \"asis\",   skill_evaluation_decode = \"default\",   custom_code_parser,   metadata_only = FALSE,   verbose = FALSE,   edited_meta )  read_dv(   filename,   insert_technical_timeouts = TRUE,   do_warn = FALSE,   do_transliterate = FALSE,   encoding = \"guess\",   date_format = \"guess\",   extra_validation = 2,   validation_options = list(),   surname_case = \"asis\",   skill_evaluation_decode = \"default\",   custom_code_parser,   metadata_only = FALSE,   verbose = FALSE,   edited_meta )"},{"path":"/reference/dv_read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a datavolley file — dv_read","text":"filename string: file name read insert_technical_timeouts logical list: insert technical timeouts? TRUE, technical timeouts inserted points 8 16 sets 1--4 (indoor files) team scores sum 21 sets 1--2 (beach). Otherwise two-element list can supplied, giving scores technical timeouts inserted sets 1--4,  set 5. do_warn logical: issue warnings contents file read ? do_transliterate logical: transliterate text ASCII? See details encoding character: text encoding use. Text converted encoding UTF-8. vector multiple encodings can provided, function attempt choose best. encoding \"guess\", encoding guessed date_format string: expected date format (one \"ymd\", \"mdy\", \"dmy\") \"guess\". date_format something \"guess\", date format preferred dates ambiguous extra_validation numeric: run extra validation checks file? 0=extra validation, 1=check major errors, 2=somewhat extensive, 3=extra checking validation_options list: additional options pass validation step. See dv_validate details surname_case string function: change case player surnames? surname_case string, valid values \"upper\",\"lower\",\"title\", \"asis\"; otherwise surname_case may function applied player surname strings skill_evaluation_decode function string: skill_evaluation_decode string, can either \"default\" (use default DataVolley conventions dvw vsm files), \"volleymetrics\" (follow scouting conventions used VolleyMetrics), \"german\" (\"default\" B/ B= swapped), \"guess\" (use volleymetrics looks like VolleyMetrics file, otherwise default). skill_evaluation_decode function, convert skill evaluation codes meaningful phrases. See skill_evaluation_decoder custom_code_parser function: function process custom codes might present datavolley file. function takes one input (datavolley object) return list two named components: plays messages metadata_only logical: process plays component file, just match player metadata verbose logical: TRUE, show progress edited_meta list: [much experimental] supplied, used place metadata present file . makes possible , example, read file, edit metadata, re-parse file using modified metadata","code":""},{"path":"/reference/dv_read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a datavolley file — dv_read","text":"named list several elements. meta provides match metadata, plays main play--play data form data.frame. raw line--line content datavolley file. messages data.frame describing inconsistencies found file.","code":""},{"path":"/reference/dv_read.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read a datavolley file — dv_read","text":"http://www.dataproject.com//en/Volleyball","code":""},{"path":[]},{"path":"/reference/dv_read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a datavolley file — dv_read","text":"","code":"if (FALSE) {   ## to read the example file bundled with the package   myfile <- dv_example_file()   x <- dv_read(myfile, insert_technical_timeouts=FALSE)   summary(x)    ## or to read your own file:   x <- dv_read(\"c:/some/path/myfile.dvw\", insert_technical_timeouts=FALSE)    ## Insert a technical timeout at point 12 in sets 1 to 4:   x <- dv_read(myfile, insert_technical_timeouts=list(c(12),NULL))    ## to read a VolleyMetrics file   x <- dv_read(myfile, skill_evaluation_decode = \"volleymetrics\") }"},{"path":"/reference/dv_read_sq.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a team roster (*.sq) file — dv_read_sq","title":"Read a team roster (*.sq) file — dv_read_sq","text":"Read team roster (*.sq) file","code":""},{"path":"/reference/dv_read_sq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a team roster (*.sq) file — dv_read_sq","text":"","code":"dv_read_sq(   filename,   do_transliterate = FALSE,   encoding = \"guess\",   date_format = \"guess\",   surname_case = \"asis\",   verbose = FALSE )"},{"path":"/reference/dv_read_sq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a team roster (*.sq) file — dv_read_sq","text":"filename string: file name read do_transliterate logical: transliterate text ASCII? encoding character: text encoding use. Text converted encoding UTF-8. vector multiple encodings can provided, function attempt choose best. encoding \"guess\", encoding guessed date_format string: expected date format (used dates birth). One \"ymd\", \"mdy\", \"dmy\", \"guess\". date_format something \"guess\", date format preferred dates ambiguous surname_case string function: change case player surnames? surname_case string, valid values \"upper\",\"lower\",\"title\", \"asis\"; otherwise surname_case may function applied player surname strings verbose logical: TRUE, show progress","code":""},{"path":"/reference/dv_read_sq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a team roster (*.sq) file — dv_read_sq","text":"list two components: \"team\" \"players\", data frames","code":""},{"path":"/reference/dv_read_sq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a team roster (*.sq) file — dv_read_sq","text":"","code":"if (FALSE) {   x <- dv_read_sq(\"/path/to/my/roster_file\") }"},{"path":"/reference/dv_repair.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to repair a datavolley object — dv_repair","title":"Attempt to repair a datavolley object — dv_repair","text":"Currently attempt made repair issues: * multiple players team jersey number, players number (team) take court removed team roster. situation, whether player took court determined match metadata * multiple players player ID different jersey numbers, players ID take court removed team roster. situation, whether player took court determined match metadata play--play data","code":""},{"path":"/reference/dv_repair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to repair a datavolley object — dv_repair","text":"","code":"dv_repair(x)"},{"path":"/reference/dv_repair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to repair a datavolley object — dv_repair","text":"x datavolley: datavolley object returned [dv_read()]","code":""},{"path":"/reference/dv_repair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to repair a datavolley object — dv_repair","text":"modified copy `x`. problems exist repaired, error thrown","code":""},{"path":"/reference/dv_sync_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the video sync times in a dvw file — dv_sync_summary","title":"Summarize the video sync times in a dvw file — dv_sync_summary","text":"function generate summary various video time differences dvw file. Apply file synchronized video, results can used tweak behaviour dv_sync_video.","code":""},{"path":"/reference/dv_sync_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the video sync times in a dvw file — dv_sync_summary","text":"","code":"dv_sync_summary(x)"},{"path":"/reference/dv_sync_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the video sync times in a dvw file — dv_sync_summary","text":"x datavolley: single datavolley object returned dv_read, plays component one","code":""},{"path":"/reference/dv_sync_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the video sync times in a dvw file — dv_sync_summary","text":"data.frame columns type, N, mean, most_common, min, max","code":""},{"path":[]},{"path":"/reference/dv_sync_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the video sync times in a dvw file — dv_sync_summary","text":"","code":"x <- dv_read(dv_example_file(3)) dv_sync_summary(x) #> # A tibble: 14 × 6 #>    type                                          N  mean most_common   min   max #>    <chr>                                     <int> <dbl>       <dbl> <dbl> <dbl> #>  1 Serve to reception time (Jump serve)         27 2.85            3     1     6 #>  2 Serve to reception time (Jump-float serv…    48 2.02            1     0     4 #>  3 Serve to reception time (Other serve typ…    22 1.09            0    -1     3 #>  4 Reception to set time                        72 2.83            3     0    11 #>  5 Set to attack time (High ball set)           54 0.889           0    -1     3 #>  6 Set to attack time (Other set types)         57 1.04            1    -1     3 #>  7 Set to attack time (Quick ball set)          16 0.812           2    -5     3 #>  8 Attack to block time                         40 1.8             3     0     7 #>  9 Attack to dig time (no block touch)          45 1.78            1    -1     6 #> 10 Attack to dig time (with block touch)         3 3               6     0     6 #> 11 Dig to set time                              39 0.513           1    -2     2 #> 12 Attack to counter-attack time                48 3.69            3     0     6 #> 13 Overpass to next touch time                  13 4.15            5     0     8 #> 14 Last touch to end of rally                  107 0               0     0     0"},{"path":"/reference/dv_sync_video.html","id":null,"dir":"Reference","previous_headings":"","what":"Synchronize video times — dv_sync_video","title":"Synchronize video times — dv_sync_video","text":"function uses time serve rules align contacts rally (approximately correct) times corresponding match video. Warning: experimental!","code":""},{"path":"/reference/dv_sync_video.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synchronize video times — dv_sync_video","text":"","code":"dv_sync_video(   x,   first_serve_contact,   freeball_dig_time_offset = NA,   contact_times = dv_sync_contact_times(),   offsets = dv_sync_offsets(),   times_from,   enforce_order = TRUE )  dv_sync_contact_times(...)  dv_sync_offsets(...)"},{"path":"/reference/dv_sync_video.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synchronize video times — dv_sync_video","text":"x datavolley: single datavolley object returned dv_read first_serve_contact numeric string: video time first serve contact. can numeric value giving time seconds start video, string form \"MM:SS\" (minutes seconds) \"HH:MM:SS\" (hours, minutes seconds) freeball_dig_time_offset numeric: non-NA, clock times freeball digs used directly synchronization process. Freeball digs aligned using clock times relative first serve contact clock time, freeball_dig_time_offset value (seconds) added. scouting live typically enter freeball digs one second happen, use freeball_dig_time_offset = -1. freeball_dig_time_offset NA, default, clock times freeball digs used synchronization process contact_times list: set parameters control synchronization process. See Details, offsets list: list set offsets added contact time second step synchronization process. See Details, . offsets NULL empty list, offsets applied times_from string: either \"clock\" \"video\": take serve times (freeball dig times, freeball_dig_time_offset non-NA) clock video times. default, clock times used unless missing enforce_order logical: estimated contact times always time-ordered (contact time given touch prior contact time preceding touch). offsets can different different skills, leading final video times time ordered. fixed enforce_order TRUE ... : name-value pairs elements override defaults dv_sync_contact_times dv_sync_offsets","code":""},{"path":"/reference/dv_sync_video.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synchronize video times — dv_sync_video","text":"copy x modified video_time values plays component","code":""},{"path":"/reference/dv_sync_video.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synchronize video times — dv_sync_video","text":"match scouted live, clock time serve usually correct scout can enter serve code actual time serve. remainder touches rally might correct times scout keep live action. function makes assumptions typical contact--contact times better synchronize scouted contacts corresponding match video. clock time serve used reference time rally (unless user specifies times_from = \"video\"). clock times present file, video time serve used instead. also missing, function fail. Freeball digs can optionally treated way serves, scouted times used directly synchronization process. Obviously makes sense scout actually consistent timing entering freeball digs, assuming case setting freeball_dig_time_offset non-NA value improve synchronization rallies freeballs. rallies otherwise tend synchronize poorly, play messy less predictable compared -system rallies. Note synchronization clock times relies serve clock times file consistent, work match scouted single sitting (either live, video playback without pausing/rewinding/fast-forwarding video). clock times consistent video time serve correct, can use video time serve reference time instead. synchronization two-step process. first step, video time scouted contact estimated (.e. actual time player made contact ball). second step, skill-specific offsets added contact times. (important video montage software uses synchronized video times directly, normally want video clip start seconds actual contact interest). contact_times object contains set times (seconds), can adjust suit scouting style level play. already-synchronized dvw file, dv_sync_summary function can provide guidance values . contact_times object contains following entries: SQ - time scouted serve time actual serve contact jump serves SM - time scouted serve time actual serve contact jump-float serves - time scouted serve time actual serve contact serves SQ_R, SM_R, SO_R - time serve contact reception contact jump, jump-float, serves R_E - time reception contact set contact EQ_A - time set contact attack contact quick sets EH_A - time set contact attack contact high sets EO_A - time set contact attack contact sets A_B - time attack contact block contact A_D - time attack contact dig contact (intervening block touch) A_B_D - time attack contact dig contact (block touch) D_E - time dig contact set contact RDov - time reception dig overpass contact next touch opposition END - time last contact end--rally marker offsets object defines offset (seconds) added contact time second pass synchronization process. contains entries \"S\" (serve), \"R\" (reception), \"E\" (set), \"\" (attack), \"D\", (dig), \"B\" (block), \"F\" (freeball). Note entries contact_times offsets can fractions. actual video time entries returned file required integers final values rounded, using fractional values (particularly contact_times entries) can give better accuracy intermediate calculations.","code":""},{"path":[]},{"path":"/reference/dv_sync_video.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synchronize video times — dv_sync_video","text":"","code":"x <- dv_read(dv_example_file()) ## first serve contact was at 54s in the video x <- dv_sync_video(x, first_serve_contact = 54) #> Warning: the plays component of `x` is missing at least one `time` entry on serves  ## with a custom configuration my_contact_times <- dv_sync_contact_times(SQ = 3) ## override default entries as necessary ## first serve contact was at 3:35 in the video x <- dv_sync_video(x, first_serve_contact = \"3:35\", contact_times = my_contact_times) #> Warning: the plays component of `x` is missing at least one `time` entry on serves"},{"path":"/reference/dv_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional validation checks on a DataVolley file — dv_validate","title":"Additional validation checks on a DataVolley file — dv_validate","text":"function automatically run part dv_read extra_validation greater zero. current validation messages/checks : message \"total [home|visiting] team scores match result summary (x$meta$result) match total number points recorded [home|visiting] team plays data\" message \"[Home|Visiting] team roster empty\": home visiting team roster entered message \"Players xxx yyy player ID\": player IDs unique, duplicated IDs flagged message \"Players xxx yyy jersey number\": players team jersey number message \"listed player court rotation\": player making action part current rotation. Libero players ignored check message \"Back-row player made attack front-row zone\": attack starting zones 2-4 made player back row current rotation message \"Front-row player made attack back-row zone (legal, possibly scouting error)\": attack starting zones 1,5-9 made player front row current rotation message \"Quick attack non-middle player\" message \"Middle player made non-quick attack\" message \"Block back-row player\" message \"Winning serve coded ace\" message \"Non-winning serve coded ace\" message \"Serving player position 1\" message \"Player designated libero recorded making [serve|attack|block]\" message \"Attack (blocked) number blockers recorded\" message \"Attack (followed block) 'block' recorded number players\" message \"Repeated row skill evaluation_code player\" message \"Consecutive actions player\" message \"Point awarded incorrect team following error (\\\"error\\\" evaluation incorrect)\" message \"Point awarded incorrect team ([winning play] evaluation incorrect)\" message \"Scores follow proper sequence\": one team scores change one point time message \"Visiting/Home team rotation changed incorrectly\" message \"Player lineup change substitution: sub recorded incorrectly?\" message \"Player lineup conflicts recorded substitution: sub recorded incorrectly?\" message \"Reception type match serve type\": type reception (e.g. \"Jump-float serve reception\" match serve type (e.g. \"Jump-float serve\") message \"Reception start zone match serve start zone\" message \"Reception end zone match serve end zone\" message \"Reception end sub-zone match serve end sub-zone\" message \"Attack type ([type]) match set type ([type])\": type attack (e.g. \"Head ball attack\") match set type (e.g. \"High ball set\") message \"Block type ([type]) match attack type ([type])\": type block (e.g. \"Head ball block\") match attack type (e.g. \"High ball attack\") message \"Dig type ([type]) match attack type ([type])\": type dig (e.g. \"Head ball dig\") match attack type (e.g. \"High ball attack\") message \"Multiple serves single rally\" message \"Multiple receptions single rally\" message \"Serve (error) accompanying reception\" message \"Rally ball contacts serve\"","code":""},{"path":"/reference/dv_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional validation checks on a DataVolley file — dv_validate","text":"","code":"dv_validate(x, validation_level = 2, options = list(), file_type)  validate_dv(x, validation_level = 2, options = list(), file_type)"},{"path":"/reference/dv_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional validation checks on a DataVolley file — dv_validate","text":"x datavolley: datavolley object returned dv_read validation_level numeric: strictly check? 0, perform checking; 1, identify major errors; 2, also return issues likely lead misinterpretation data; 3, return issues (including minor issues might resulted selective post-processing compound codes) options list: named list options control optional validation behaviour. Valid entries : setter_tip_codes character: vector attack codes represent setter tips (attacks back-row player can validly make front-row position). code setter tips attacks, want attacks flagged error made back-row player front-row zone, enter setter tip attack codes . e.g. options=list(setter_tip_codes=c(\"PP\",\"XY\")) file_type string: \"indoor\" \"beach\". provided, taken x$file_meta$file_format entry","code":""},{"path":"/reference/dv_validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional validation checks on a DataVolley file — dv_validate","text":"data.frame columns message (validation message), file_line_number (corresponding line number DataVolley file), video_time, file_line (actual line DataVolley file).","code":""},{"path":[]},{"path":"/reference/dv_validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional validation checks on a DataVolley file — dv_validate","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)   xv <- dv_validate(x)    ## specifying \"PP\" as the setter tip code   ## front-row attacks (using this code) by a back-row player won't be flagged as errors   xv <- dv_validate(x, options = list(setter_tip_codes = c(\"PP\")))  }"},{"path":"/reference/dv_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a datavolley object to dvw file — dv_write","title":"Write a datavolley object to dvw file — dv_write","text":"Note really rather experimental, probably use yet. complete, function allow datavolley file read via dv_read, modified user, rewritten back datavolley file. stage, modifications datavolley object make back rewritten file. However, scouted code (code column) yet updated reflect changes might made columns datavolley object.","code":""},{"path":"/reference/dv_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a datavolley object to dvw file — dv_write","text":"","code":"dv_write(x, file, text_encoding = \"UTF-8\")  write_dv(x, file, text_encoding = \"UTF-8\")"},{"path":"/reference/dv_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a datavolley object to dvw file — dv_write","text":"x datavolley: datavolley object returned dv_read file string: filename write . supplied, file written dvw content returned text_encoding string: text encoding use","code":""},{"path":"/reference/dv_write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a datavolley object to dvw file — dv_write","text":"dvw file contents character vector (invisibly)","code":""},{"path":[]},{"path":"/reference/dv_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a datavolley object to dvw file — dv_write","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file())   outfile <- tempfile()   dv_write(x, outfile) }"},{"path":"/reference/dv_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Court zones to x, y coordinates — dv_xy","title":"Court zones to x, y coordinates — dv_xy","text":"Generate x y coordinates plotting, DataVolley numbered zones","code":""},{"path":"/reference/dv_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Court zones to x, y coordinates — dv_xy","text":"","code":"dv_xy(   zones,   end = \"lower\",   xynames = c(\"x\", \"y\"),   as_for_serve = FALSE,   subzones )"},{"path":"/reference/dv_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Court zones to x, y coordinates — dv_xy","text":"zones numeric: zones numbers 1-9 convert x y coordinates end string: use \"lower\" \"upper\" part figure xynames character: names use x y columns returned data.frame as_for_serve logical: TRUE, treat positions serving. zones 1,5,6,7,9 meaningful case subzones character: supplied, coordinates adjusted subzones. Values \"\" \"D\" ignored","code":""},{"path":"/reference/dv_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Court zones to x, y coordinates — dv_xy","text":"data.frame columns \"x\" \"y\" (names specified xynames)","code":""},{"path":"/reference/dv_xy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Court zones to x, y coordinates — dv_xy","text":"description court dimensions coordinates used plotting, see ggcourt","code":""},{"path":[]},{"path":"/reference/dv_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Court zones to x, y coordinates — dv_xy","text":"","code":"if (FALSE) { x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)  library(ggplot2) library(dplyr)  ## Example 1: attack frequency by zone, per team  attack_rate <- plays(x) %>% dplyr::filter(skill == \"Attack\") %>%   group_by(team, start_zone) %>% dplyr::summarize(n_attacks = n()) %>%   mutate(rate = n_attacks/sum(n_attacks)) %>% ungroup  ## add columns \"x\" and \"y\" for the x, y coordinates associated with the zones attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = \"lower\"))  ## for team 2, these need to be on the top half of the diagram tm2 <- attack_rate$team == teams(x)[2] attack_rate[tm2, c(\"x\", \"y\")] <- dv_xy(attack_rate$start_zone, end = \"upper\")[tm2, ]  ## plot this ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(x)) +   scale_fill_gradient2(name = \"Attack rate\")   ## Example 2: map of starting and ending zones of attacks using arrows  ## first tabulate attacks by starting and ending zone attack_rate <- plays(x) %>% dplyr::filter(team == teams(x)[1] & skill == \"Attack\") %>%   group_by(start_zone, end_zone) %>% tally() %>% ungroup  ## convert counts to rates attack_rate$rate <- attack_rate$n/sum(attack_rate$n)  ## discard zones with zero attacks or missing location information attack_rate <- attack_rate %>% dplyr::filter(rate>0 & !is.na(start_zone) & !is.na(end_zone))  ## add starting x,y coordinates attack_rate <- cbind(attack_rate,      dv_xy(attack_rate$start_zone, end = \"lower\", xynames = c(\"sx\",\"sy\")))  ## and ending x,y coordinates attack_rate <- cbind(attack_rate,      dv_xy(attack_rate$end_zone, end = \"upper\", xynames = c(\"ex\",\"ey\")))  ## plot in reverse order so largest arrows are on the bottom attack_rate <- attack_rate %>% dplyr::arrange(desc(rate))  p <- ggplot(attack_rate,aes(x,y,col = rate)) + ggcourt(labels = c(teams(x)[1],\"\")) for (n in 1:nrow(attack_rate))     p <- p + geom_path(data = data.frame(x = c(attack_rate$sx[n], attack_rate$ex[n]),                                        y = c(attack_rate$sy[n],attack_rate$ey[n]),                                        rate = attack_rate$rate[n]),         aes(size = rate), lineend = \"round\", arrow = arrow(ends = \"last\", type = \"closed\")) p + scale_fill_gradient(name = \"Attack rate\") + guides(size = \"none\") }"},{"path":"/reference/dv_xy2cone.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert x, y coordinates to cones — dv_xy2cone","title":"Convert x, y coordinates to cones — dv_xy2cone","text":"Convert x, y coordinates cones","code":""},{"path":"/reference/dv_xy2cone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert x, y coordinates to cones — dv_xy2cone","text":"","code":"dv_xy2cone(x, y = NULL, start_zones, force_center_zone = FALSE)"},{"path":"/reference/dv_xy2cone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert x, y coordinates to cones — dv_xy2cone","text":"x numeric: x coordinate y numeric: y coordinate. y NULL, x treated grid index (see dv_index2xy) start_zones numeric character: starting zone row (values 1-9, \"L\", \"M\", \"R\") force_center_zone logical: vector indicating rows treated center zone attacks regardless start_zone value (e.g. attacks setter). FALSE, start_zone value used. provided single scalar value, applied attacks","code":""},{"path":"/reference/dv_xy2cone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert x, y coordinates to cones — dv_xy2cone","text":"numeric vector giving cone number","code":""},{"path":[]},{"path":"/reference/dv_xy2cone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert x, y coordinates to cones — dv_xy2cone","text":"","code":"if (FALSE) {  ## a bunch of random points on and around the court idx <- round(runif(100, min = 1, max = 10000))  ## convert to cones, assuming a start_zone of \"L\" cn <- dv_xy2cone(x = idx, start_zones = \"M\")  ## generate the cone polygons for reference cxy <- dv_cone_polygons(\"M\") cxyl <- dv_cone_polygons(\"M\", end = \"lower\")  ## plot ggplot(cxy, aes(x, y, group = cone_number, fill = as.factor(cone_number))) +   ## the cone polygons   geom_polygon() + geom_polygon(data = cxyl) +   ggcourt(labels = NULL) +   ## and our points   geom_point(data = dv_index2xy(idx) %>% mutate(cone_number = cn), shape = 21,              colour = \"black\", size = 2)  ## the points shoud be coloured the same as the cone polygons }"},{"path":"/reference/dv_xy2subzone.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert x, y coordinates to zones and subzones — dv_xy2subzone","title":"Convert x, y coordinates to zones and subzones — dv_xy2subzone","text":"Convert x, y coordinates zones subzones","code":""},{"path":"/reference/dv_xy2subzone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert x, y coordinates to zones and subzones — dv_xy2subzone","text":"","code":"dv_xy2subzone(x, y = NULL)"},{"path":"/reference/dv_xy2subzone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert x, y coordinates to zones and subzones — dv_xy2subzone","text":"x numeric: x coordinate y numeric: y coordinate. y NULL, x treated grid index (see dv_index2xy)","code":""},{"path":"/reference/dv_xy2subzone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert x, y coordinates to zones and subzones — dv_xy2subzone","text":"tibble columns zone subzone","code":""},{"path":[]},{"path":"/reference/dv_xy2subzone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert x, y coordinates to zones and subzones — dv_xy2subzone","text":"","code":"if (FALSE) {  ## a bunch of random points on and around the court idx <- round(runif(100, min = 1, max = 10000))  ## convert to zones zn <- dv_xy2subzone(x = idx)  ## or, equivalently, convert the index to xy values first zn <- cbind(zn, dv_index2xy(idx))  ## plot ggplot(zn, aes(x, y, colour = as.factor(zone), shape = subzone)) + geom_point(size = 3) +   ggcourt(labels = NULL)  ## the points shoud be coloured by zone }"},{"path":"/reference/dv_xy2zone.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert x, y coordinates to zones — dv_xy2zone","title":"Convert x, y coordinates to zones — dv_xy2zone","text":"Convert x, y coordinates zones","code":""},{"path":"/reference/dv_xy2zone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert x, y coordinates to zones — dv_xy2zone","text":"","code":"dv_xy2zone(x, y = NULL, as_for_serve = FALSE)"},{"path":"/reference/dv_xy2zone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert x, y coordinates to zones — dv_xy2zone","text":"x numeric: x coordinate y numeric: y coordinate. y NULL, x treated grid index (see dv_index2xy) as_for_serve logical: TRUE, treat zones refer serving locations (.e. zone 7 zones 5 6, zone 9 zones 6 1)","code":""},{"path":"/reference/dv_xy2zone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert x, y coordinates to zones — dv_xy2zone","text":"numeric vector giving zone number","code":""},{"path":[]},{"path":"/reference/dv_xy2zone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert x, y coordinates to zones — dv_xy2zone","text":"","code":"if (FALSE) {  ## a bunch of random points on and around the court idx <- round(runif(100, min = 1, max = 10000))  ## convert to zones zn <- dv_xy2zone(x = idx)  ## or, equivalently, convert the index to xy values first idx_xy <- dv_index2xy(idx) zn <- dv_xy2zone(x = idx_xy$x, idx_xy$y)  ## plot ggplot(idx_xy, aes(x, y, fill = as.factor(zn))) + geom_point(shape = 21) +   ggcourt(labels = NULL)  ## the points shoud be coloured by zone }"},{"path":"/reference/dvlist_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a list of volleyball matches — dvlist_summary","title":"Summarize a list of volleyball matches — dvlist_summary","text":"Summarize list volleyball matches","code":""},{"path":"/reference/dvlist_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a list of volleyball matches — dvlist_summary","text":"","code":"dvlist_summary(z)"},{"path":"/reference/dvlist_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a list of volleyball matches — dvlist_summary","text":"z list: list datavolley objects returned dv_read","code":""},{"path":"/reference/dvlist_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a list of volleyball matches — dvlist_summary","text":"named list various summary indicators, including competition ladder","code":""},{"path":[]},{"path":"/reference/dvlist_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a list of volleyball matches — dvlist_summary","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE)   dvlist_summary(list(x,x)) ## same match duplicated twice, just for illustration purposes }"},{"path":"/reference/find_first_attack.html","id":null,"dir":"Reference","previous_headings":"","what":"Find first attacks by the receiving team (i.e. attacks associated with a serve reception) — find_first_attack","title":"Find first attacks by the receiving team (i.e. attacks associated with a serve reception) — find_first_attack","text":"Find first attacks receiving team (.e. attacks associated serve reception)","code":""},{"path":"/reference/find_first_attack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find first attacks by the receiving team (i.e. attacks associated with a serve reception) — find_first_attack","text":"","code":"find_first_attack(x)"},{"path":"/reference/find_first_attack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find first attacks by the receiving team (i.e. attacks associated with a serve reception) — find_first_attack","text":"x data.frame: plays component datavolley object, returned dv_read()","code":""},{"path":"/reference/find_first_attack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find first attacks by the receiving team (i.e. attacks associated with a serve reception) — find_first_attack","text":"named list components \"ix\" (logical indices x object row corresponds first attack rally), \"n\" (number receptions first attack receiving team), \"n_win\" (number winning first attacks), \"win_rate\" (number winning first attacks proportion total number first attacks).","code":""},{"path":[]},{"path":"/reference/find_first_attack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find first attacks by the receiving team (i.e. attacks associated with a serve reception) — find_first_attack","text":"","code":"if (FALSE) { x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE) ## first attack win rate, by team by(plays(x),plays(x)$team,function(z)find_first_attack(z)$win_rate) }"},{"path":"/reference/find_match.html","id":null,"dir":"Reference","previous_headings":"","what":"Find a particular match in a list of datavolley objects — find_match","title":"Find a particular match in a list of datavolley objects — find_match","text":"Find particular match list datavolley objects","code":""},{"path":"/reference/find_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find a particular match in a list of datavolley objects — find_match","text":"","code":"find_match(match_id, x)"},{"path":"/reference/find_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find a particular match in a list of datavolley objects — find_match","text":"match_id string: match_id find x list: list datavolley objects returned dv_read","code":""},{"path":"/reference/find_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find a particular match in a list of datavolley objects — find_match","text":"numeric index match list","code":""},{"path":[]},{"path":"/reference/find_player_name_remapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Attempt to build a player name remapping table — find_player_name_remapping","title":"Attempt to build a player name remapping table — find_player_name_remapping","text":"player name can sometimes spelled incorrectly, particularly character encoding issues. can particular problem combining data multiple files. function attempt find names misspelled create remapping table suitable pass remap_player_names. Player names compared within team. Note function unlikely get perfect results: use output care.","code":""},{"path":"/reference/find_player_name_remapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attempt to build a player name remapping table — find_player_name_remapping","text":"","code":"find_player_name_remapping(x, distance_threshold = 3, verbose = TRUE)"},{"path":"/reference/find_player_name_remapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attempt to build a player name remapping table — find_player_name_remapping","text":"x datavolley: datavolley object returned dv_read, list objects distance_threshold numeric: two names differ amount less threshold, treated name verbose logical: print progress console go? Note warnings also issued regardless setting","code":""},{"path":"/reference/find_player_name_remapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attempt to build a player name remapping table — find_player_name_remapping","text":"data.frame columns team, , ","code":""},{"path":[]},{"path":"/reference/find_player_name_remapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attempt to build a player name remapping table — find_player_name_remapping","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)   remap <- find_player_name_remapping(x) }"},{"path":"/reference/find_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate information about runs of events — find_runs","title":"Generate information about runs of events — find_runs","text":"Find runs events within match. Typically, function passed subset plays(x), rows corresponding serves. Runs terminated end set assigned run_length.","code":""},{"path":"/reference/find_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate information about runs of events — find_runs","text":"","code":"find_runs(x, idvars = \"team\", within_set = TRUE)"},{"path":"/reference/find_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate information about runs of events — find_runs","text":"x data.frame: subset plays component datavolley object, returned dv_read() idvars character: string character vector variabe names use identify entity events within_set logical: consider runs within single set? FALSE, runs span sets treated single run","code":""},{"path":"/reference/find_runs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate information about runs of events — find_runs","text":"data.frame number rows x, columns run_id (identifier run row belongs), run_length (length run), run_position (position row associated run).","code":""},{"path":[]},{"path":"/reference/find_runs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate information about runs of events — find_runs","text":"","code":"if (FALSE) { ## find runs of serves x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE) serve_idx <- find_serves(plays(x)) serve_run_info <- find_runs(plays(x)[serve_idx,]) ## distribution of serve run lengths table(unique(serve_run_info[,c(\"run_id\",\"run_length\")])$run_length) }"},{"path":"/reference/find_serves.html","id":null,"dir":"Reference","previous_headings":"","what":"Find serves — find_serves","title":"Find serves — find_serves","text":"Find serves","code":""},{"path":"/reference/find_serves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find serves — find_serves","text":"","code":"find_serves(x)"},{"path":"/reference/find_serves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find serves — find_serves","text":"x data.frame: plays component datavolley object, returned dv_read()","code":""},{"path":"/reference/find_serves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find serves — find_serves","text":"logical vector, giving indices rows x correspond serves","code":""},{"path":[]},{"path":"/reference/find_serves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find serves — find_serves","text":"","code":"if (FALSE) { x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE) serve_idx <- find_serves(plays(x)) ## number of serves by team table(plays(x)$team[serve_idx]) }"},{"path":"/reference/findnext.html","id":null,"dir":"Reference","previous_headings":"","what":"Find each entry in y that follows each entry in x — findnext","title":"Find each entry in y that follows each entry in x — findnext","text":"Find entry y follows entry x","code":""},{"path":"/reference/findnext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find each entry in y that follows each entry in x — findnext","text":"","code":"findnext(x, y)"},{"path":"/reference/findnext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find each entry in y that follows each entry in x — findnext","text":"x numeric: vector y numeric: vector","code":""},{"path":"/reference/findnext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find each entry in y that follows each entry in x — findnext","text":"vector, entry value y next-largest corresponding entry x","code":""},{"path":"/reference/findnext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find each entry in y that follows each entry in x — findnext","text":"","code":"findnext(c(1,5,10),c(1,2,3,7,8,9)) #> [1]  2  7 NA"},{"path":"/reference/findprev.html","id":null,"dir":"Reference","previous_headings":"","what":"Find each entry in y that precedes each entry in x — findprev","title":"Find each entry in y that precedes each entry in x — findprev","text":"Find entry y precedes entry x","code":""},{"path":"/reference/findprev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find each entry in y that precedes each entry in x — findprev","text":"","code":"findprev(x, y)"},{"path":"/reference/findprev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find each entry in y that precedes each entry in x — findprev","text":"x numeric: vector y numeric: vector","code":""},{"path":"/reference/findprev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find each entry in y that precedes each entry in x — findprev","text":"vector, entry value y next-smallest corresponding entry x","code":""},{"path":"/reference/findprev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find each entry in y that precedes each entry in x — findprev","text":"","code":"findprev(c(1,5,10),c(1,2,3,7,8,9)) #> [1] NA  3  9"},{"path":"/reference/fix_ace_evaluations.html","id":null,"dir":"Reference","previous_headings":"","what":"Find aces that might not be marked as such — fix_ace_evaluations","title":"Find aces that might not be marked as such — fix_ace_evaluations","text":"DataVolley files indicate serve aces skill evaluation \"Ace\". function search winning serves, either reception reception error, change evaluation value \"Ace\"","code":""},{"path":"/reference/fix_ace_evaluations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find aces that might not be marked as such — fix_ace_evaluations","text":"","code":"fix_ace_evaluations(x, rotation_error_is_ace = FALSE, verbose = TRUE)"},{"path":"/reference/fix_ace_evaluations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find aces that might not be marked as such — fix_ace_evaluations","text":"x datavolley: datavolley object returned dv_read, list objects rotation_error_is_ace logical: rotation error reception receiving team counted ace? verbose logical: print progress console?","code":""},{"path":"/reference/fix_ace_evaluations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find aces that might not be marked as such — fix_ace_evaluations","text":"datavolley object list updated evaluation values","code":""},{"path":[]},{"path":"/reference/ggcourt.html","id":null,"dir":"Reference","previous_headings":"","what":"ggplot volleyball court — ggcourt","title":"ggplot volleyball court — ggcourt","text":"Volleyball court schematic suitable adding ggplot","code":""},{"path":"/reference/ggcourt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggplot volleyball court — ggcourt","text":"","code":"ggcourt(   court = \"full\",   show_zones = TRUE,   labels = c(\"Serving team\", \"Receiving team\"),   as_for_serve = FALSE,   show_zone_lines = TRUE,   show_minor_zones = FALSE,   show_3m_line = TRUE,   grid_colour = \"black\",   zone_colour = \"grey70\",   minor_zone_colour = \"grey80\",   fixed_aspect_ratio = TRUE,   zone_font_size = 10,   label_font_size = 12,   label_colour = \"black\",   court_colour = NULL,   figure_colour = NULL,   background_only = FALSE,   foreground_only = FALSE,   line_width = 0.5,   xlim,   ylim,   ... )"},{"path":"/reference/ggcourt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ggplot volleyball court — ggcourt","text":"court string: \"full\" (show full court) \"lower\" \"upper\" (show lower upper half court) show_zones logical: add numbers indicating court zones (3m squares)? labels string: labels lower upper court halves (pass NULL labels) as_for_serve logical: TRUE show_zones TRUE, show zones serving. zones 1,5,6,7,9 meaningful case show_zone_lines logical: FALSE, just show 3m line. TRUE, also show 3m x 3m zones show_minor_zones logical: add lines subzones (1.5m squares)? show_3m_line logical: TRUE, show 3m (10ft) line grid_colour string: colour use court sidelines, 3m line, net zone_colour string: colour use zone lines labels minor_zone_colour string: colour use minor zone grid lines fixed_aspect_ratio logical: TRUE, coerce plotted court square (half-court plot) 2:1 rectangle (full court plot). Prior package version 0.5.3 TRUE default zone_font_size numeric: font size zone labels label_font_size numeric: font size labels label_colour string: colour use labels court_colour string: colour use court. NULL, court plotted lines (colour fill) figure_colour show . Several special values also supported : court_colour = \"indoor\" can used shortcut set court colour orange, figure colour blue, lines labels white (similar typical indoor court colour scheme) court_colour = \"beach\" can used shortcut set court figure colour sandy-coloured yellow, lines labels black, 3m line shown default court_colour = \"sand\" \"beach\" sand texture image used court background figure_colour string: colour set figure background . NULL, background colour theme used (white, default) background_only logical: TRUE, plot background elements (including general plot attributes theme) foreground_only logical: TRUE, plot foreground elements (grid lines, labels, etc) line_width numeric: line width (passed size parameter e.g. ggplot2::geom_path) xlim numeric: (optional) limits x-axis ylim numeric: (optional) limits y-axis ... : additional parameters passed ggplot2::theme_classic","code":""},{"path":"/reference/ggcourt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ggplot volleyball court — ggcourt","text":"ggplot layer","code":""},{"path":"/reference/ggcourt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ggplot volleyball court — ggcourt","text":"datavolley package uses following dimensions coordinates plotting: court shown sidelines oriented vertically net oriented horizontally intersection left-hand sideline bottom baseline (0.5, 0.5) intersection right-hand sideline top baseline (3.5, 6.5) net intersects sidelines (0.5, 3.5) (3.5, 3.5) zones 1-9 (defined DataVolley manual) lower half court located : (3, 1) (3, 3) (2, 3) (1, 3) (1, 1) (2, 1) (1, 2) (2, 2) (3, 2) zones 1-9 (defined DataVolley manual) upper half court located : (1, 6) (1, 4) (2, 4) (3, 4) (3, 6) (2, 6) (3, 5) (2, 5) (1, 5) get visual depiction , try:  ggplot() + ggcourt() + theme_bw()","code":""},{"path":[]},{"path":"/reference/ggcourt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ggplot volleyball court — ggcourt","text":"","code":"if (FALSE) { x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE)  library(ggplot2) library(dplyr)  ## Example 1: attack frequency by zone, per team  attack_rate <- plays(x) %>% dplyr::filter(skill == \"Attack\") %>%   group_by(team, start_zone) %>% dplyr::summarize(n_attacks=n()) %>%   mutate(rate=n_attacks/sum(n_attacks)) %>% ungroup  ## add columns \"x\" and \"y\" for the x,y coordinates associated with the zones attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = \"lower\"))  ## for team 2, these need to be on the top half of the diagram tm2 <- attack_rate$team == teams(x)[2] attack_rate[tm2, c(\"x\", \"y\")] <- dv_xy(attack_rate$start_zone, end = \"upper\")[tm2, ]  ## plot this ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(x)) +   scale_fill_gradient2(name = \"Attack rate\")   ## Example 2: controlling layering ## use the background_only and foreground_only parameters to control the ##   order of layers in a plot  ggplot(attack_rate, aes(x, y, fill=rate)) +   ## add the background court colours   ggcourt(court_colour = \"indoor\", background_only = TRUE) +   ## now the heatmap   geom_tile() +   ## and finally the grid lines and labels   ggcourt(labels = teams(x), foreground_only = TRUE, court_colour = \"indoor\")   ## Example 3: map of starting and ending zones of attacks using arrows  ## first tabulate attacks by starting and ending zone attack_rate <- plays(x) %>% dplyr::filter(team == teams(x)[1] & skill == \"Attack\") %>%   group_by(start_zone, end_zone) %>% tally() %>% ungroup  ## convert counts to rates attack_rate$rate <- attack_rate$n/sum(attack_rate$n)  ## discard zones with zero attacks or missing location information attack_rate <- attack_rate %>% dplyr::filter(rate>0 & !is.na(start_zone) & !is.na(end_zone))  ## add starting x,y coordinates attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = \"lower\",                                         xynames = c(\"sx\",\"sy\")))  ## and ending x,y coordinates attack_rate <- cbind(attack_rate, dv_xy(attack_rate$end_zone, end = \"upper\",                                         xynames = c(\"ex\",\"ey\")))  ## plot in reverse order so largest arrows are on the bottom attack_rate <- attack_rate %>% dplyr::arrange(desc(rate))  p <- ggplot(attack_rate, aes(x, y, col = rate)) + ggcourt(labels = c(teams(x)[1], \"\")) for (n in 1:nrow(attack_rate))     p <- p + geom_path(data = data.frame(x = c(attack_rate$sx[n], attack_rate$ex[n]),                                          y = c(attack_rate$sy[n], attack_rate$ey[n]),                                          rate = attack_rate$rate[n]),                        aes(size = rate), lineend = \"round\",                        arrow = arrow(length = unit(2, \"mm\"), type = \"closed\",                                      angle = 20, ends = \"last\")) p + scale_colour_gradient(name = \"Attack rate\") + guides(size = \"none\") }"},{"path":"/reference/ggxy-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Court zones to x, y coordinates — ggxy-deprecated","title":"Court zones to x, y coordinates — ggxy-deprecated","text":"Generate x y coordinates plotting, DataVolley numbered zones","code":""},{"path":"/reference/ggxy-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Court zones to x, y coordinates — ggxy-deprecated","text":"","code":"ggxy(zones, end=\"lower\", xynames=c(\"x\", \"y\"), as_for_serve=FALSE)"},{"path":"/reference/ggxy-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Court zones to x, y coordinates — ggxy-deprecated","text":"zones numeric: zones numbers 1-9 convert x y coordinates end string: use \"lower\" \"upper\" part figure xynames character: names use x y columns returned data.frame as_for_serve logical: TRUE, treat positions serving. zones 1,5,6,7,9 meaningful case","code":""},{"path":"/reference/ggxy-deprecated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Court zones to x, y coordinates — ggxy-deprecated","text":"data.frame columns \"x\" \"y\" (names specified xynames)","code":""},{"path":[]},{"path":"/reference/inspect.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience function for inspecting the plays component of a datavolley object — inspect","title":"Convenience function for inspecting the plays component of a datavolley object — inspect","text":"Convenience function inspecting plays component datavolley object","code":""},{"path":"/reference/inspect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience function for inspecting the plays component of a datavolley object — inspect","text":"","code":"inspect(x, vars = \"minimal\", maxrows = 100, extra)"},{"path":"/reference/inspect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience function for inspecting the plays component of a datavolley object — inspect","text":"x datavolleyplays: plays component datavolley object returned dv_read vars string: variables print? \"minimal\" set \"\" maxrows numeric: maximum number rows print extra character: names extra columns include output","code":""},{"path":[]},{"path":"/reference/inspect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience function for inspecting the plays component of a datavolley object — inspect","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE)   inspect(plays(x)) }"},{"path":"/reference/play_phase.html","id":null,"dir":"Reference","previous_headings":"","what":"Figure out the phase of play associated with each point — play_phase","title":"Figure out the phase of play associated with each point — play_phase","text":"Phase either \"Serve\", \"Reception\" (serve reception set attack immediately following , well opposition block attack), \"Transition\" (play actions )","code":""},{"path":"/reference/play_phase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Figure out the phase of play associated with each point — play_phase","text":"","code":"play_phase(x, method = \"default\")"},{"path":"/reference/play_phase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Figure out the phase of play associated with each point — play_phase","text":"x datavolleyplays: plays component datavolley object returned dv_read method string: \"default\" (uses team_touch_id skill values figure phase), \"alt\" (uses sequences skill values . slower probably less reliable, likely give correct results situations (e.g. DataVolley file scouted practice mode, actions assigned one team)","code":""},{"path":"/reference/play_phase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Figure out the phase of play associated with each point — play_phase","text":"character vector","code":""},{"path":[]},{"path":"/reference/play_phase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Figure out the phase of play associated with each point — play_phase","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)   px <- plays(x)   px$phase <- play_phase(px) }"},{"path":"/reference/plays.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the plays component from a datavolley object, or assign a new one — plays","title":"Extract the plays component from a datavolley object, or assign a new one — plays","text":"Extract plays component datavolley object, assign new one","code":""},{"path":"/reference/plays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the plays component from a datavolley object, or assign a new one — plays","text":"","code":"plays(x)  plays(x) <- value"},{"path":"/reference/plays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the plays component from a datavolley object, or assign a new one — plays","text":"x datavolley: datavolley object returned dv_read value datavolleyplays: new data","code":""},{"path":"/reference/plays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the plays component from a datavolley object, or assign a new one — plays","text":"plays component x (data.frame), modified version x new plays component inserted","code":""},{"path":[]},{"path":"/reference/plays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the plays component from a datavolley object, or assign a new one — plays","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE)   inspect(plays(x))    p2 <- plays(x)   plays(x) <- p2 }"},{"path":"/reference/print.summary.datavolley.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for summary.datavolley — print.summary.datavolley","title":"Print method for summary.datavolley — print.summary.datavolley","text":"Print method summary.datavolley","code":""},{"path":"/reference/print.summary.datavolley.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for summary.datavolley — print.summary.datavolley","text":"","code":"# S3 method for summary.datavolley print(x, ...)"},{"path":"/reference/print.summary.datavolley.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for summary.datavolley — print.summary.datavolley","text":"x summary.datavolley: summary.datavolley object returned summary.datavolley ... : additional arguments (currently effect)","code":""},{"path":[]},{"path":"/reference/print.summary.datavolleylist.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for summary.datavolleylist — print.summary.datavolleylist","title":"Print method for summary.datavolleylist — print.summary.datavolleylist","text":"Print method summary.datavolleylist","code":""},{"path":"/reference/print.summary.datavolleylist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for summary.datavolleylist — print.summary.datavolleylist","text":"","code":"# S3 method for summary.datavolleylist print(x, ...)"},{"path":"/reference/print.summary.datavolleylist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for summary.datavolleylist — print.summary.datavolleylist","text":"x summary.datavolleylist: summary.datavolleylist object, returned dvlist_summary ... : additional arguments (currently effect)","code":""},{"path":[]},{"path":"/reference/read_dv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a datavolley file — read_dv","title":"Read a datavolley file — read_dv","text":"do_transliterate option may helpful trying work multiple files competition, since different text encodings may used different files. can lead e.g. multiple versions team name. Transliterating can help avoid , cost losing e.g. diacriticals. Transliteration applied converting specified text encoding UTF-8. Common encodings used DataVolley files include \"windows-1252\" (western Europe), \"windows-1250\" (central Europe), \"iso-8859-1\" (western Europe Americas), \"iso-8859-2\" (central/eastern Europe), \"iso-8859-13\" (Baltic languages)","code":""},{"path":"/reference/read_dv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a datavolley file — read_dv","text":"","code":"read_dv(   filename,   insert_technical_timeouts = TRUE,   do_warn = FALSE,   do_transliterate = FALSE,   encoding = \"guess\",   date_format = \"guess\",   extra_validation = 2,   validation_options = list(),   surname_case = \"asis\",   skill_evaluation_decode = \"default\",   custom_code_parser,   metadata_only = FALSE,   verbose = FALSE,   edited_meta )  dv_read(   filename,   insert_technical_timeouts = TRUE,   do_warn = FALSE,   do_transliterate = FALSE,   encoding = \"guess\",   date_format = \"guess\",   extra_validation = 2,   validation_options = list(),   surname_case = \"asis\",   skill_evaluation_decode = \"default\",   custom_code_parser,   metadata_only = FALSE,   verbose = FALSE,   edited_meta )"},{"path":"/reference/read_dv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a datavolley file — read_dv","text":"filename string: file name read insert_technical_timeouts logical list: insert technical timeouts? TRUE, technical timeouts inserted points 8 16 sets 1--4 (indoor files) team scores sum 21 sets 1--2 (beach). Otherwise two-element list can supplied, giving scores technical timeouts inserted sets 1--4,  set 5. do_warn logical: issue warnings contents file read ? do_transliterate logical: transliterate text ASCII? See details encoding character: text encoding use. Text converted encoding UTF-8. vector multiple encodings can provided, function attempt choose best. encoding \"guess\", encoding guessed date_format string: expected date format (one \"ymd\", \"mdy\", \"dmy\") \"guess\". date_format something \"guess\", date format preferred dates ambiguous extra_validation numeric: run extra validation checks file? 0=extra validation, 1=check major errors, 2=somewhat extensive, 3=extra checking validation_options list: additional options pass validation step. See help('validate_dv') details surname_case string function: change case player surnames? surname_case string, valid values \"upper\",\"lower\",\"title\", \"asis\"; otherwise surname_case may function applied player surname strings skill_evaluation_decode function string: skill_evaluation_decode string, can either \"default\" (use default DataVolley conventions dvw vsm files), \"volleymetrics\" (follow scouting conventions used VolleyMetrics), \"german\" (\"default\" B/ B= swapped), \"guess\" (use volleymetrics looks like VolleyMetrics file, otherwise default). skill_evaluation_decode function, convert skill evaluation codes meaningful phrases. See skill_evaluation_decoder custom_code_parser function: function process custom codes might present datavolley file. function takes one input (datavolley object) return list two named components: plays messages metadata_only logical: process plays component file, just match player metadata verbose logical: TRUE, show progress edited_meta list: [much experimental] supplied, used place metadata present file . makes possible , example, read file, edit metadata, re-parse file using modified metadata","code":""},{"path":"/reference/read_dv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a datavolley file — read_dv","text":"named list several elements. meta provides match metadata, plays main play--play data form data.frame. raw line--line content datavolley file. messages data.frame describing inconsistencies found file.","code":""},{"path":"/reference/read_dv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Read a datavolley file — read_dv","text":"http://www.dataproject.com//en/Volleyball","code":""},{"path":[]},{"path":"/reference/read_dv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a datavolley file — read_dv","text":"","code":"if (FALSE) {   ## to read the example file bundled with the package   myfile <- dv_example_file()   x <- dv_read(myfile, insert_technical_timeouts=FALSE)   summary(x)    ## or to read your own file:   x <- dv_read(\"c:/some/path/myfile.dvw\", insert_technical_timeouts=FALSE)    ## Insert a technical timeout at point 12 in sets 1 to 4:   x <- dv_read(myfile, insert_technical_timeouts=list(c(12),NULL))    ## to read a VolleyMetrics file   x <- dv_read(myfile, skill_evaluation_decode = \"volleymetrics\") }"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. vscoututils dv_insert_sets, dv_insert_sets_check","code":""},{"path":"/reference/remap_player_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Change player information — remap_player_info","title":"Change player information — remap_player_info","text":"experimental function replace remap_player_names comprehensive remapping player attributes.","code":""},{"path":"/reference/remap_player_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change player information — remap_player_info","text":"","code":"remap_player_info(x, remap)"},{"path":"/reference/remap_player_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change player information — remap_player_info","text":"x datavolley: datavolley object returned dv_read, list objects remap data.frame: data.frame strings columns team, name_from, player_id, firstname, lastname","code":""},{"path":"/reference/remap_player_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change player information — remap_player_info","text":"datavolley object list corresponding player names changed","code":""},{"path":"/reference/remap_player_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change player information — remap_player_info","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)   x <- remap_player_info(x, data.frame(team = c(\"Nova KBM Branik\", \"Braslovče\"),                                        name_from = c(\"ELA PINTAR\", \"KATJA MIHALINEC\"),                                        firstname = c(\"Ela\", \"Katja\"), stringsAsFactors = FALSE)) }"},{"path":"/reference/remap_player_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Change player names — remap_player_names","title":"Change player names — remap_player_names","text":"player name can sometimes spelled incorrectly, particularly character encoding issues. can particular problem combining data multiple files. player matching team name entries row remap renamed corresponding value. Alternatively, remap can provided columns player_id player_name: player name entries associated given player_id changed associated player_name.","code":""},{"path":"/reference/remap_player_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change player names — remap_player_names","text":"","code":"remap_player_names(x, remap)"},{"path":"/reference/remap_player_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change player names — remap_player_names","text":"x datavolley: datavolley object returned dv_read, list objects remap data.frame: data.frame strings columns team, , ","code":""},{"path":"/reference/remap_player_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change player names — remap_player_names","text":"datavolley object list corresponding player names changed","code":""},{"path":[]},{"path":"/reference/remap_player_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change player names — remap_player_names","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)   x <- remap_player_names(x, data.frame(team = c(\"Nova KBM Branik\", \"Braslovče\"),                                         from = c(\"ELA PINTAR\", \"KATJA MIHALINEC\"),                                         to = c(\"Ela PINTAR\", \"Katja MIHALINEC\"),                                         stringsAsFactors = FALSE))    x <- remap_player_names(x, data.frame(player_id = c(\"id1\", \"id2\"),                                         player_name = c(\"name to use 1\", \"name to use 2\"),                                         stringsAsFactors = FALSE)) }"},{"path":"/reference/remap_team_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Change team names — remap_team_names","title":"Change team names — remap_team_names","text":"team name can sometimes spelled incorrectly, particularly character encoding issues. can particular problem combining data multiple files. team name matches entry /ID matches team_id entry row remap, team renamed corresponding value /ID changed corresponding to_team_id value.","code":""},{"path":"/reference/remap_team_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change team names — remap_team_names","text":"","code":"remap_team_names(x, remap, fixed = TRUE)"},{"path":"/reference/remap_team_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change team names — remap_team_names","text":"x datavolley: datavolley object returned dv_read, list objects remap data.frame: data.frame strings one columns team_id, one columns to_team_id fixed logical: treat team_id entries fixed strings? fixed FALSE treated regular expressions","code":""},{"path":"/reference/remap_team_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change team names — remap_team_names","text":"datavolley object list corresponding team names changed","code":""},{"path":[]},{"path":"/reference/remap_team_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change team names — remap_team_names","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)   summary(x)    ## rename a team based just on team name   summary(remap_team_names(x, data.frame(from=\"Nova KBM Branik\", to=\"NKBM Branik\")))    ## rename a team based on team name and ID   summary(remap_team_names(x, data.frame(from=\"Nova KBM Branik\", to=\"NKBM Branik\", team_id=\"MB4\"))) }"},{"path":"/reference/serve_win_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Find serve win points — serve_win_points","title":"Find serve win points — serve_win_points","text":"Find points serving team wins point. Serve win rate fraction serves won serving team.","code":""},{"path":"/reference/serve_win_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find serve win points — serve_win_points","text":"","code":"serve_win_points(x, return_id = FALSE)"},{"path":"/reference/serve_win_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find serve win points — serve_win_points","text":"x data.frame: plays component datavolley object, returned dv_read() return_id logical: include match_id point_id serve win points returned object?","code":""},{"path":"/reference/serve_win_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find serve win points — serve_win_points","text":"named list components \"ix\" (logical indices serves corresponding serve win points x object), \"n\" (number serve win points x), \"rate\" (serve win rate x). return_id TRUE, also return component \"id\" (data.frame containing match_id point_id serve win points)","code":""},{"path":[]},{"path":"/reference/serve_win_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find serve win points — serve_win_points","text":"","code":"if (FALSE) { x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE) serve_idx <- find_serves(plays(x)) swp <- serve_win_points(plays(x)) ## number of serves by team table(plays(x)$team[serve_idx]) ## number of points won on serve by team table(plays(x)$team[serve_idx & swp$ix]) }"},{"path":"/reference/skill_evaluation_decoder.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate skill evaluation codes into meaningful summary phrases — skill_evaluation_decoder","title":"Translate skill evaluation codes into meaningful summary phrases — skill_evaluation_decoder","text":"DataVolley files use evaluation codes differently coded , need supply custom skill_evaluation_decode function dv_read","code":""},{"path":"/reference/skill_evaluation_decoder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate skill evaluation codes into meaningful summary phrases — skill_evaluation_decoder","text":"","code":"skill_evaluation_decoder(style = \"default\")"},{"path":"/reference/skill_evaluation_decoder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate skill evaluation codes into meaningful summary phrases — skill_evaluation_decoder","text":"style string: currently \"default\" (following standard definitions described DataVolley manual) \"volleymetrics\" (per conventions VolleyMetrics use)","code":""},{"path":"/reference/skill_evaluation_decoder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate skill evaluation codes into meaningful summary phrases — skill_evaluation_decoder","text":"function. function takes arguments skill, evaluation_code, show_map returns string giving interpretation skill evaluation code","code":""},{"path":[]},{"path":"/reference/skill_evaluation_decoder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate skill evaluation codes into meaningful summary phrases — skill_evaluation_decoder","text":"","code":"sd <- skill_evaluation_decoder() sd(\"S\",\"#\") #> [1] \"Ace\" sd(show_map=TRUE) #>    skill evaluation_code                     evaluation #> 1      S               =                          Error #> 2      S               /            Positive, no attack #> 3      S               - Negative, opponent free attack #> 4      S               + Positive, opponent some attack #> 5      S               #                            Ace #> 6      S               !    OK, no first tempo possible #> 7      R               =                          Error #> 8      R               /                Poor, no attack #> 9      R               -       Negative, limited attack #> 10     R               +               Positive, attack #> 11     R               #                   Perfect pass #> 12     R               !    OK, no first tempo possible #> 13     A               =                          Error #> 14     A               /                        Blocked #> 15     A               -               Poor, easily dug #> 16     A               !           Blocked for reattack #> 17     A               +          Positive, good attack #> 18     A               #                 Winning attack #> 19     B               =                          Error #> 20     B               /                       Invasion #> 21     B               -     Poor, opposition to replay #> 22     B               +          Positive, block touch #> 23     B               #                  Winning block #> 24     B               !     Poor, opposition to replay #> 25     D               =                          Error #> 26     D               /    Ball directly back over net #> 27     D               -  No structured attack possible #> 28     D               #                    Perfect dig #> 29     D               +                       Good dig #> 30     D               !    OK, no first tempo possible #> 31     E               =                          Error #> 32     E               -                           Poor #> 33     E               /                           Poor #> 34     E               +                       Positive #> 35     E               #                        Perfect #> 36     E               !                             OK #> 37     F               =                          Error #> 38     F               /                           Poor #> 39     F               !    OK, no first tempo possible #> 40     F               -     OK, only high set possible #> 41     F               +                           Good #> 42     F               #                        Perfect"},{"path":"/reference/summary.datavolley.html","id":null,"dir":"Reference","previous_headings":"","what":"A simple summary of a volleyball match — summary.datavolley","title":"A simple summary of a volleyball match — summary.datavolley","text":"simple summary volleyball match","code":""},{"path":"/reference/summary.datavolley.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simple summary of a volleyball match — summary.datavolley","text":"","code":"# S3 method for datavolley summary(object, ...)"},{"path":"/reference/summary.datavolley.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A simple summary of a volleyball match — summary.datavolley","text":"object datavolley: datavolley object returned dv_read ... : additional arguments (currently effect)","code":""},{"path":"/reference/summary.datavolley.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A simple summary of a volleyball match — summary.datavolley","text":"list summary items","code":""},{"path":[]},{"path":"/reference/summary.datavolley.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A simple summary of a volleyball match — summary.datavolley","text":"","code":"x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE) summary(x) #> Match summary: #> Date: 2015-01-25 #> League: Finale mladinke #> Teams: Braslovče (JERONČIČ ZORAN/MIHALINEC DAMIJANA) #>        vs #>        Nova KBM Branik (HAFNER MATJAŽ) #> Result: 3-0 (25-16, 25-14, 25-22) #> Duration: 67 minutes"},{"path":"/reference/teams.html","id":null,"dir":"Reference","previous_headings":"","what":"Get team names and IDs from datavolley object — teams","title":"Get team names and IDs from datavolley object — teams","text":"Get team names IDs datavolley object","code":""},{"path":"/reference/teams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get team names and IDs from datavolley object — teams","text":"","code":"teams(x)  home_team(x)  home_team_id(x)  visiting_team(x)  visiting_team_id(x)"},{"path":"/reference/teams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get team names and IDs from datavolley object — teams","text":"x datavolley data.frame: datavolley object returned dv_read, plays component object","code":""},{"path":"/reference/teams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get team names and IDs from datavolley object — teams","text":"character vector team names IDs","code":""},{"path":[]},{"path":"/reference/teams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get team names and IDs from datavolley object — teams","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)   teams(x)   home_team_id(x) }"},{"path":"/reference/validate_dv.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional validation checks on a DataVolley file — validate_dv","title":"Additional validation checks on a DataVolley file — validate_dv","text":"function automatically run part dv_read extra_validation greater zero. current validation messages/checks : message \"total [home|visiting] team scores match result summary (x$meta$result) match total number points recorded [home|visiting] team plays data\" message \"Players xxx yyy player ID\": player IDs unique, duplicated IDs flagged message \"listed player court rotation\": player making action part current rotation. Libero players ignored check message \"Back-row player made attack front-row zone\": attack starting zones 2-4 made player back row current rotation message \"Front-row player made attack back-row zone (legal, possibly scouting error)\": attack starting zones 1,5-9 made player front row current rotation message \"Quick attack non-middle player\" message \"Middle player made non-quick attack\" message \"Block back-row player\" message \"Winning serve coded ace\" message \"Non-winning serve coded ace\" message \"Serving player position 1\" message \"Player designated libero recorded making [serve|attack|block]\" message \"Attack (blocked) number blockers recorded\" message \"Attack (followed block) 'block' recorded number players\" message \"Repeated row skill evaluation_code player\" message \"Consecutive actions player\" message \"Point awarded incorrect team following error (\\\"error\\\" evaluation incorrect)\" message \"Point awarded incorrect team ([winning play] evaluation incorrect)\" message \"Scores follow proper sequence\": one team scores change one point time message \"Visiting/Home team rotation changed incorrectly\" message \"Player lineup change substitution: sub recorded incorrectly?\" message \"Player lineup conflicts recorded substitution: sub recorded incorrectly?\" message \"Reception type match serve type\": type reception (e.g. \"Jump-float serve reception\" match serve type (e.g. \"Jump-float serve\") message \"Reception start zone match serve start zone\" message \"Reception end zone match serve end zone\" message \"Reception end sub-zone match serve end sub-zone\" message \"Attack type ([type]) match set type ([type])\": type attack (e.g. \"Head ball attack\") match set type (e.g. \"High ball set\") message \"Block type ([type]) match attack type ([type])\": type block (e.g. \"Head ball block\") match attack type (e.g. \"High ball attack\") message \"Dig type ([type]) match attack type ([type])\": type dig (e.g. \"Head ball dig\") match attack type (e.g. \"High ball attack\") message \"Multiple serves single rally\" message \"Multiple receptions single rally\" message \"Serve (error) accompanying reception\" message \"Rally ball contacts serve\"","code":""},{"path":"/reference/validate_dv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional validation checks on a DataVolley file — validate_dv","text":"","code":"validate_dv(x, validation_level = 2, options = list(), file_type)"},{"path":"/reference/validate_dv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional validation checks on a DataVolley file — validate_dv","text":"x datavolley: datavolley object returned dv_read validation_level numeric: strictly check? 0, perform checking; 1, identify major errors; 2, also return issues likely lead misinterpretation data; 3, return issues (including minor issues might resulted selective post-processing compound codes) options list: named list options control optional validation behaviour. Valid entries : setter_tip_codes character: vector attack codes represent setter tips (attacks back-row player can validly make front-row position). code setter tips attacks, want attacks flagged error made back-row player front-row zone, enter setter tip attack codes . e.g. options=list(setter_tip_codes=c(\"PP\",\"XY\")) file_type string: \"indoor\" \"beach\". provided, taken x$file_meta$file_format entry","code":""},{"path":"/reference/validate_dv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional validation checks on a DataVolley file — validate_dv","text":"data.frame columns message (validation message), file_line_number (corresponding line number DataVolley file), video_time, file_line (actual line DataVolley file).","code":""},{"path":[]},{"path":"/reference/validate_dv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional validation checks on a DataVolley file — validate_dv","text":"","code":"if (FALSE) {   x <- dv_read(dv_example_file(), insert_technical_timeouts = FALSE)   xv <- validate_dv(x)    ## specifying \"PP\" as the setter tip code   ## front-row attacks (using this code) by a back-row player won't be flagged as errors   xv <- validate_dv(x, options = list(setter_tip_codes = c(\"PP\")))  }"},{"path":"/news/index.html","id":"datavolley-174","dir":"Changelog","previous_headings":"","what":"datavolley 1.7.4","title":"datavolley 1.7.4","text":"minor revisions dv_sync_video function","code":""},{"path":"/news/index.html","id":"datavolley-173","dir":"Changelog","previous_headings":"","what":"datavolley 1.7.3","title":"datavolley 1.7.3","text":"minor bugfixes","code":""},{"path":"/news/index.html","id":"datavolley-171","dir":"Changelog","previous_headings":"","what":"datavolley 1.7.1","title":"datavolley 1.7.1","text":"evaluation string used set “/” evaluation code changed “Error (reach net)” just “Error” consistency skills (applies files using VolleyMetrics conventions )","code":""},{"path":"/news/index.html","id":"datavolley-170","dir":"Changelog","previous_headings":"","what":"datavolley 1.7.0","title":"datavolley 1.7.0","text":"fixes support files using sideout scoring","code":""},{"path":"/news/index.html","id":"datavolley-164","dir":"Changelog","previous_headings":"","what":"datavolley 1.6.4","title":"datavolley 1.6.4","text":"add experimental video sync functions","code":""},{"path":"/news/index.html","id":"datavolley-163","dir":"Changelog","previous_headings":"","what":"datavolley 1.6.3","title":"datavolley 1.6.3","text":"remove dependence enc package, archived CRAN enforce start_coordinate column meta$attacks table integer small improvements","code":""},{"path":"/news/index.html","id":"datavolley-160","dir":"Changelog","previous_headings":"","what":"datavolley 1.6.0","title":"datavolley 1.6.0","text":"propagate player name changes (made via remap_player_names()) first last names metadata (thanks @awosoga) added remap_player_info() function (thanks @awosoga) small bugfixes","code":""},{"path":"/news/index.html","id":"datavolley-150","dir":"Changelog","previous_headings":"","what":"datavolley 1.5.0","title":"datavolley 1.5.0","text":"support .vsm files","code":""},{"path":"/news/index.html","id":"datavolley-135","dir":"Changelog","previous_headings":"","what":"datavolley 1.3.5","title":"datavolley 1.3.5","text":"Minor updates: - better detection Cyrillic text encoding","code":""},{"path":"/news/index.html","id":"datavolley-133","dir":"Changelog","previous_headings":"","what":"datavolley 1.3.3","title":"datavolley 1.3.3","text":"Minor updates: - initial setter assignments (start set) longer marked substitutions - better handling corrupted position coordinates dvw files","code":""},{"path":"/news/index.html","id":"datavolley-130","dir":"Changelog","previous_headings":"","what":"datavolley 1.3.0","title":"datavolley 1.3.0","text":"raster package shifted Imports Suggests, meaning won’t installed default. affects plotting raster images (heatmaps) base graphics. don’t raster installed, prompt","code":""},{"path":"/news/index.html","id":"datavolley-129","dir":"Changelog","previous_headings":"","what":"datavolley 1.2.9","title":"datavolley 1.2.9","text":"convert colour columns hex colour strings (previously integer-encoded) minor speed improvements reading meta$winning_symbols now data frame","code":""},{"path":"/news/index.html","id":"datavolley-123","dir":"Changelog","previous_headings":"","what":"datavolley 1.2.3","title":"datavolley 1.2.3","text":"utilities make files scouted ClickNScout useful optional xlim, ylim ggcourt, add dv_find_to_flip_coordinates function","code":""},{"path":"/news/index.html","id":"datavolley-120","dir":"Changelog","previous_headings":"","what":"datavolley 1.2.0","title":"datavolley 1.2.0","text":"bug fix: actions scouted unknown player (denoted dvw file player number “$$”) previously incorrectly parsed","code":""},{"path":"/news/index.html","id":"datavolley-100","dir":"Changelog","previous_headings":"","what":"datavolley 1.0.0","title":"datavolley 1.0.0","text":"cope missing file metadata entries improvements handling text encoding","code":""},{"path":"/news/index.html","id":"datavolley-100-1","dir":"Changelog","previous_headings":"","what":"datavolley 1.0.0","title":"datavolley 1.0.0","text":"fix dv_xy2zone make serve zones equal widths add line_width ggcourt","code":""},{"path":"/news/index.html","id":"datavolley-0160","dir":"Changelog","previous_headings":"","what":"datavolley 0.16.0","title":"datavolley 0.16.0","text":"add dv_read_sq function improvements match date parsing add columns scores start point (home_score_start_of_point, visiting_score_start_of_point) trim whitespace team player names IDs","code":""},{"path":"/news/index.html","id":"datavolley-0150","dir":"Changelog","previous_headings":"","what":"datavolley 0.15.0","title":"datavolley 0.15.0","text":"minor bugfixes rotation check, validation peranavolley files ‘beach’ ‘sand’ ggcourt options fix set number sets_won partially-scouted files","code":""},{"path":"/news/index.html","id":"datavolley-0140","dir":"Changelog","previous_headings":"","what":"datavolley 0.14.0","title":"datavolley 0.14.0","text":"improvements detecting text encoding minor bugfixes","code":""},{"path":"/news/index.html","id":"datavolley-0130","dir":"Changelog","previous_headings":"","what":"datavolley 0.13.0","title":"datavolley 0.13.0","text":"adjustments team_touch_id phase account files attacks scouted point_phase (“Point/Side ” column DataVolley codes list window) attack_phase (“Attack reception/dig”) columns added play--play data dv_write function added additional fixes following changes text encoding handling v0.12.0","code":""},{"path":"/news/index.html","id":"datavolley-0120","dir":"Changelog","previous_headings":"","what":"datavolley 0.12.0","title":"datavolley 0.12.0","text":"substantial changes way text encoding handled, including guessing correct encoding read_dv(..., text_encoding = \"guess\"). Text encoding work better now, particular Windows added date_format parameter read_dv, user can specify preferred date format use dates ambiguous","code":""}]
