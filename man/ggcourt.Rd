% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot.R
\name{ggcourt}
\alias{ggcourt}
\title{ggplot volleyball court}
\usage{
ggcourt(
  court = "full",
  show_zones = TRUE,
  labels = c("Serving team", "Receiving team"),
  as_for_serve = FALSE,
  show_zone_lines = TRUE,
  show_minor_zones = FALSE,
  show_3m_line = TRUE,
  grid_colour = "black",
  zone_colour = "grey70",
  minor_zone_colour = "grey80",
  fixed_aspect_ratio = TRUE,
  zone_font_size = 10,
  label_font_size = 12,
  label_colour = "black",
  court_colour = NULL,
  figure_colour = NULL,
  background_only = FALSE,
  foreground_only = FALSE,
  line_width = 0.5,
  xlim,
  ylim,
  ...
)
}
\arguments{
\item{court}{string: "full" (show full court) or "lower" or "upper" (show only the lower or upper half of the court)}

\item{show_zones}{logical: add numbers indicating the court zones (3m squares)?}

\item{labels}{string: labels for the lower and upper court halves (pass NULL for no labels)}

\item{as_for_serve}{logical: if TRUE and \code{show_zones} is TRUE, show zones as for serving. Only zones 1,5,6,7,9 are meaningful in this case}

\item{show_zone_lines}{logical: if FALSE, just show the 3m line. If TRUE, also show the 3m x 3m zones}

\item{show_minor_zones}{logical: add lines for the subzones (1.5m squares)?}

\item{show_3m_line}{logical: if TRUE, show the 3m (10ft) line}

\item{grid_colour}{string: colour to use for court sidelines, 3m line, and net}

\item{zone_colour}{string: colour to use for zone lines and labels}

\item{minor_zone_colour}{string: colour to use for minor zone grid lines}

\item{fixed_aspect_ratio}{logical: if TRUE, coerce the plotted court to be square (for a half-court plot) or a 2:1 rectangle (full court plot). Prior to package version 0.5.3 this was not TRUE by default}

\item{zone_font_size}{numeric: the font size of the zone labels}

\item{label_font_size}{numeric: the font size of the labels}

\item{label_colour}{string: colour to use for labels}

\item{court_colour}{string: colour to use for the court. If \code{NULL}, the court is only plotted with lines (no colour fill) and so the \code{figure_colour} will show through. Several special values are also supported here:
\itemize{
\item \code{court_colour = "indoor"} can be used as a shortcut to set the court colour to orange, figure colour to blue, and lines and labels to white (similar to the typical indoor court colour scheme)
\item \code{court_colour = "beach"} can be used as a shortcut to set the court and figure colour to a sandy-coloured yellow, lines and labels to black, and with the 3m line not shown by default
\item \code{court_colour = "sand"} as for "beach" but with a sand texture image used as the court background
}}

\item{figure_colour}{string: colour to set the figure background to. If \code{NULL}, the background colour of the theme will be used (white, by default)}

\item{background_only}{logical: if \code{TRUE}, only plot the background elements (including general plot attributes such as the theme)}

\item{foreground_only}{logical: if \code{TRUE}, only plot the foreground elements (grid lines, labels, etc)}

\item{line_width}{numeric: line width (passed as the size parameter to e.g. \code{ggplot2::geom_path})}

\item{xlim}{numeric: (optional) limits for the x-axis}

\item{ylim}{numeric: (optional) limits for the y-axis}

\item{...}{: additional parameters passed to \code{ggplot2::theme_classic}}
}
\value{
ggplot layer
}
\description{
Volleyball court schematic suitable for adding to a ggplot
}
\details{
The datavolley package uses the following dimensions and coordinates for plotting:
\itemize{
\item the court is shown such that the sidelines are oriented vertically and the net is oriented horizontally
\item the intersection of the left-hand sideline and the bottom baseline is at (0.5, 0.5)
\item the intersection of the right-hand sideline and the top baseline is at (3.5, 6.5)
\item the net intersects the sidelines at (0.5, 3.5) and (3.5, 3.5)
\item the zones 1-9 (as defined in the DataVolley manual) on the lower half of the court are located at:
\enumerate{
\item (3, 1)
\item (3, 3)
\item (2, 3)
\item (1, 3)
\item (1, 1)
\item (2, 1)
\item (1, 2)
\item (2, 2)
\item (3, 2)
}
\item the zones 1-9 (as defined in the DataVolley manual) on the upper half of the court are located at:
\enumerate{
\item (1, 6)
\item (1, 4)
\item (2, 4)
\item (3, 4)
\item (3, 6)
\item (2, 6)
\item (3, 5)
\item (2, 5)
\item (1, 5)
}
}

To get a visual depiction of this, try: \code{ ggplot() + ggcourt() + theme_bw()}
}
\examples{
\dontrun{
x <- dv_read(dv_example_file(), insert_technical_timeouts=FALSE)

library(ggplot2)
library(dplyr)

## Example 1: attack frequency by zone, per team

attack_rate <- plays(x) \%>\% dplyr::filter(skill == "Attack") \%>\%
  group_by(team, start_zone) \%>\% dplyr::summarize(n_attacks=n()) \%>\%
  mutate(rate=n_attacks/sum(n_attacks)) \%>\% ungroup

## add columns "x" and "y" for the x,y coordinates associated with the zones
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower"))

## for team 2, these need to be on the top half of the diagram
tm2 <- attack_rate$team == teams(x)[2]
attack_rate[tm2, c("x", "y")] <- dv_xy(attack_rate$start_zone, end = "upper")[tm2, ]

## plot this
ggplot(attack_rate, aes(x, y, fill = rate)) + geom_tile() + ggcourt(labels = teams(x)) +
  scale_fill_gradient2(name = "Attack rate")


## Example 2: controlling layering
## use the background_only and foreground_only parameters to control the
##   order of layers in a plot

ggplot(attack_rate, aes(x, y, fill=rate)) +
  ## add the background court colours
  ggcourt(court_colour = "indoor", background_only = TRUE) +
  ## now the heatmap
  geom_tile() +
  ## and finally the grid lines and labels
  ggcourt(labels = teams(x), foreground_only = TRUE, court_colour = "indoor")


## Example 3: map of starting and ending zones of attacks using arrows

## first tabulate attacks by starting and ending zone
attack_rate <- plays(x) \%>\% dplyr::filter(team == teams(x)[1] & skill == "Attack") \%>\%
  group_by(start_zone, end_zone) \%>\% tally() \%>\% ungroup

## convert counts to rates
attack_rate$rate <- attack_rate$n/sum(attack_rate$n)

## discard zones with zero attacks or missing location information
attack_rate <- attack_rate \%>\% dplyr::filter(rate>0 & !is.na(start_zone) & !is.na(end_zone))

## add starting x,y coordinates
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$start_zone, end = "lower",
                                        xynames = c("sx","sy")))

## and ending x,y coordinates
attack_rate <- cbind(attack_rate, dv_xy(attack_rate$end_zone, end = "upper",
                                        xynames = c("ex","ey")))

## plot in reverse order so largest arrows are on the bottom
attack_rate <- attack_rate \%>\% dplyr::arrange(desc(rate))

p <- ggplot(attack_rate, aes(x, y, col = rate)) + ggcourt(labels = c(teams(x)[1], ""))
for (n in 1:nrow(attack_rate))
    p <- p + geom_path(data = data.frame(x = c(attack_rate$sx[n], attack_rate$ex[n]),
                                         y = c(attack_rate$sy[n], attack_rate$ey[n]),
                                         rate = attack_rate$rate[n]),
                       aes(size = rate), lineend = "round",
                       arrow = arrow(length = unit(2, "mm"), type = "closed",
                                     angle = 20, ends = "last"))
p + scale_colour_gradient(name = "Attack rate") + guides(size = "none")
}

}
\seealso{
\code{\link{dv_xy}}, \code{\link{dv_xy2index}}, \code{\link{dv_index2xy}}, \code{\link{dv_flip_xy}}
}
